{"ast":null,"code":"const {\n  inherits\n} = require('util');\n\nconst DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\n\ninherits(PEMDecoder, DERDecoder);\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  const lines = data.toString().split(/[\\r\\n]+/g);\n  const label = options.label.toUpperCase();\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  let start = -1;\n  let end = -1;\n\n  for (let i = 0; i < lines.length; i++) {\n    const match = lines[i].match(re);\n\n    if (match === null) {\n      continue;\n    }\n\n    if (match[2] !== label) {\n      continue;\n    }\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') {\n        break;\n      }\n\n      start = i;\n    } else {\n      if (match[1] !== 'END') {\n        break;\n      }\n\n      end = i;\n      break;\n    }\n  }\n\n  if (start === -1 || end === -1) {\n    throw new Error(`PEM section not found for: ${label}`);\n  }\n\n  const base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols\n\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n  const input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n\nmodule.exports = PEMDecoder;","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/@panva/asn1.js/lib/asn1/decoders/pem.js"],"names":["inherits","require","DERDecoder","PEMDecoder","entity","call","enc","prototype","decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input","Buffer","from","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,MAAD,CAA5B;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,OAAD,CAA1B;;AAEA,SAASE,UAAT,CAAqBC,MAArB,EAA6B;AAC3BF,EAAAA,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,MAAtB;AACA,OAAKE,GAAL,GAAW,KAAX;AACD;;AACDN,QAAQ,CAACG,UAAD,EAAaD,UAAb,CAAR;;AAEAC,UAAU,CAACI,SAAX,CAAqBC,MAArB,GAA8B,SAASA,MAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AAC5D,QAAMC,KAAK,GAAGF,IAAI,CAACG,QAAL,GAAgBC,KAAhB,CAAsB,UAAtB,CAAd;AAEA,QAAMC,KAAK,GAAGJ,OAAO,CAACI,KAAR,CAAcC,WAAd,EAAd;AAEA,QAAMC,EAAE,GAAG,iCAAX;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,KAAK,GAAGV,KAAK,CAACQ,CAAD,CAAL,CAASE,KAAT,CAAeL,EAAf,CAAd;;AACA,QAAIK,KAAK,KAAK,IAAd,EAAoB;AAAE;AAAU;;AAEhC,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAaP,KAAjB,EAAwB;AAAE;AAAU;;AAEpC,QAAIG,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,UAAII,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B;AAAE;AAAO;;AACnCJ,MAAAA,KAAK,GAAGE,CAAR;AACD,KAHD,MAGO;AACL,UAAIE,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EAAwB;AAAE;AAAO;;AACjCH,MAAAA,GAAG,GAAGC,CAAN;AACA;AACD;AACF;;AACD,MAAIF,KAAK,KAAK,CAAC,CAAX,IAAgBC,GAAG,KAAK,CAAC,CAA7B,EAAgC;AAAE,UAAM,IAAII,KAAJ,CAAW,8BAA6BR,KAAM,EAA9C,CAAN;AAAwD;;AAE1F,QAAMS,MAAM,GAAGZ,KAAK,CAACa,KAAN,CAAYP,KAAK,GAAG,CAApB,EAAuBC,GAAvB,EAA4BO,IAA5B,CAAiC,EAAjC,CAAf,CAzB4D,CA0B5D;;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,iBAAf,EAAkC,EAAlC;AAEA,QAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoB,QAApB,CAAd;AACA,SAAOrB,UAAU,CAACK,SAAX,CAAqBC,MAArB,CAA4BH,IAA5B,CAAiC,IAAjC,EAAuCsB,KAAvC,EAA8CjB,OAA9C,CAAP;AACD,CA/BD;;AAiCAoB,MAAM,CAACC,OAAP,GAAiB5B,UAAjB","sourcesContent":["const { inherits } = require('util')\r\n\r\nconst DERDecoder = require('./der')\r\n\r\nfunction PEMDecoder (entity) {\r\n  DERDecoder.call(this, entity)\r\n  this.enc = 'pem'\r\n}\r\ninherits(PEMDecoder, DERDecoder)\r\n\r\nPEMDecoder.prototype.decode = function decode (data, options) {\r\n  const lines = data.toString().split(/[\\r\\n]+/g)\r\n\r\n  const label = options.label.toUpperCase()\r\n\r\n  const re = /^-----(BEGIN|END) ([^-]+)-----$/\r\n  let start = -1\r\n  let end = -1\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const match = lines[i].match(re)\r\n    if (match === null) { continue }\r\n\r\n    if (match[2] !== label) { continue }\r\n\r\n    if (start === -1) {\r\n      if (match[1] !== 'BEGIN') { break }\r\n      start = i\r\n    } else {\r\n      if (match[1] !== 'END') { break }\r\n      end = i\r\n      break\r\n    }\r\n  }\r\n  if (start === -1 || end === -1) { throw new Error(`PEM section not found for: ${label}`) }\r\n\r\n  const base64 = lines.slice(start + 1, end).join('')\r\n  // Remove excessive symbols\r\n  base64.replace(/[^a-z0-9+/=]+/gi, '')\r\n\r\n  const input = Buffer.from(base64, 'base64')\r\n  return DERDecoder.prototype.decode.call(this, input, options)\r\n}\r\n\r\nmodule.exports = PEMDecoder\r\n"]},"metadata":{},"sourceType":"script"}