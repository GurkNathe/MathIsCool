{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a, _b;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.version = exports.routingHeader = void 0; // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nlet needTextEncoderPolyfill = false;\n\nif (isbrowser_1.isBrowser() && ( // eslint-disable-next-line node/no-unsupported-features/node-builtins\ntypeof TextEncoder === 'undefined' || typeof TextDecoder === 'undefined')) {\n  needTextEncoderPolyfill = true;\n}\n\nif (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) && ((_b = process === null || process === void 0 ? void 0 : process.versions) === null || _b === void 0 ? void 0 : _b.node.match(/^10\\./))) {\n  // Node.js 10 does not have global TextDecoder\n  // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const util = require('util');\n\n  Object.assign(global, {\n    TextDecoder: util.TextDecoder,\n    TextEncoder: util.TextEncoder\n  });\n}\n\nif (needTextEncoderPolyfill) {\n  require('fast-text-encoding');\n}\n\nconst protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nconst gax = require(\"./gax\");\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nconst abort_controller_1 = require(\"abort-controller\");\n\nconst status_1 = require(\"./status\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst objectHash = require(\"object-hash\");\n\nconst operationsClient_1 = require(\"./operationsClient\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst fallbackError_1 = require(\"./fallbackError\");\n\nconst transcoding_1 = require(\"./transcoding\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function () {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function () {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function () {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function () {\n    return streaming_1.StreamType;\n  }\n});\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nclass GrpcClient {\n  /**\r\n   * gRPC-fallback version of GrpcClient\r\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\r\n   *\r\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\r\n   *  to use in Node.js. Required for browser, optional for Node.js.\r\n   * @constructor\r\n   */\n  constructor(options = {}) {\n    if (isbrowser_1.isBrowser()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n  }\n  /**\r\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\r\n   * This method will delete the proto cache content.\r\n   */\n\n\n  static clearProtoCache() {\n    GrpcClient.protoCache.clear();\n  }\n  /**\r\n   * gRPC-fallback version of loadProto\r\n   * Loads the protobuf root object from a JSON object created from a proto file\r\n   * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\r\n   * @returns {Object} Root namespace of proto JSON\r\n   */\n\n\n  loadProto(jsonObject) {\n    const rootObject = protobuf.Root.fromJSON(jsonObject);\n    return rootObject;\n  }\n\n  loadProtoJSON(json, ignoreCache = false) {\n    const hash = objectHash(json);\n    const cached = GrpcClient.protoCache.get(hash);\n\n    if (cached && !ignoreCache) {\n      return cached;\n    }\n\n    const root = protobuf.Root.fromJSON(json);\n    GrpcClient.protoCache.set(hash, root);\n    return root;\n  }\n\n  static getServiceMethods(service) {\n    const methods = {};\n\n    for (const [methodName, methodObject] of Object.entries(service.methods)) {\n      const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n      methods[methodNameLowerCamelCase] = methodObject;\n    }\n\n    return methods;\n  }\n  /**\r\n   * gRPC-fallback version of constructSettings\r\n   * A wrapper of {@link constructSettings} function under the gRPC context.\r\n   *\r\n   * Most of parameters are common among constructSettings, please take a look.\r\n   * @param {string} serviceName - The fullly-qualified name of the service.\r\n   * @param {Object} clientConfig - A dictionary of the client config.\r\n   * @param {Object} configOverrides - A dictionary of overriding configs.\r\n   * @param {Object} headers - A dictionary of additional HTTP header name to\r\n   *   its value.\r\n   * @return {Object} A mapping of method names to CallSettings.\r\n   */\n\n\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    function buildMetadata(abTests, moreHeaders) {\n      const metadata = {};\n\n      if (!headers) {\n        headers = {};\n      } // Since gRPC expects each header to be an array,\n      // we are doing the same for fallback here.\n\n\n      for (const key in headers) {\n        metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n      } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n      const clientVersions = [];\n\n      if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n        clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\n      }\n\n      clientVersions.push(`grpc-web/${exports.version}`);\n      metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n      if (!moreHeaders) {\n        return metadata;\n      }\n\n      for (const key in moreHeaders) {\n        if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n          const value = moreHeaders[key];\n\n          if (Array.isArray(value)) {\n            if (metadata[key] === undefined) {\n              metadata[key] = value;\n            } else {\n              if (Array.isArray(metadata[key])) {\n                metadata[key].push(...value);\n              } else {\n                throw new Error(`Can not add value ${value} to the call metadata.`);\n              }\n            }\n          } else {\n            metadata[key] = [value];\n          }\n        }\n      }\n\n      return metadata;\n    }\n\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n      metadataBuilder: buildMetadata\n    });\n  }\n  /**\r\n   * gRPC-fallback version of createStub\r\n   * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\r\n   *\r\n   * @param {function} CreateStub - The constructor function of the stub.\r\n   * @param {Object} service - A protobufjs Service object (as returned by lookupService)\r\n   * @param {Object} opts - Connection options, as described below.\r\n   * @param {string} opts.servicePath - The hostname of the API endpoint service.\r\n   * @param {number} opts.port - The port of the service.\r\n   * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\r\n   */\n\n\n  async createStub(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  customServicePath) {\n    // an RPC function to be passed to protobufjs RPC API\n    function serviceClientImpl(method, requestData, callback) {\n      return [requestData, callback];\n    } // decoder for google.rpc.Status messages\n\n\n    const statusDecoder = new fallbackError_1.FallbackErrorDecoder();\n\n    if (!this.authClient) {\n      if (this.auth && 'getClient' in this.auth) {\n        this.authClient = await this.auth.getClient();\n      } else if (this.auth && 'getRequestHeaders' in this.auth) {\n        this.authClient = this.auth;\n      }\n    }\n\n    if (!this.authClient) {\n      throw new Error('No authentication was provided');\n    }\n\n    const authHeader = await this.authClient.getRequestHeaders();\n    const serviceStub = service.create(serviceClientImpl, false, false);\n    const methods = GrpcClient.getServiceMethods(service); // grpcCompatibleServiceStub methods accept four parameters:\n    // request, options, metadata, and callback - similar to\n    // the stub returned by grpc.ts\n\n    const grpcCompatibleServiceStub = service.create(serviceClientImpl, false, false);\n\n    for (const [methodName, methodObject] of Object.entries(methods)) {\n      grpcCompatibleServiceStub[methodName] = (req, options, metadata, callback) => {\n        const [requestData, serviceCallback] = serviceStub[methodName].apply(serviceStub, [methodObject.resolvedRequestType.fromObject(req), (err, response) => {\n          if (!err) {\n            // converts a protobuf message instance to a plain JavaScript object\n            // with enum and long conversion options specified\n            const responseObject = methodObject.resolvedResponseType.toObject(response, {\n              enums: String,\n              longs: String\n            });\n            callback(null, responseObject);\n          } else {\n            callback(err);\n          }\n        }]); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        let cancelController, cancelSignal;\n\n        if (isbrowser_1.isBrowser() || typeof AbortController !== 'undefined') {\n          // eslint-disable-next-line no-undef\n          cancelController = new AbortController();\n        } else {\n          cancelController = new abort_controller_1.AbortController();\n        }\n\n        if (cancelController) {\n          cancelSignal = cancelController.signal;\n        }\n\n        let cancelRequested = false;\n        const headers = Object.assign({}, authHeader);\n\n        for (const key of Object.keys(options)) {\n          headers[key] = options[key][0];\n        }\n\n        const grpcFallbackProtocol = opts.protocol || 'https';\n        let servicePath = opts.servicePath;\n\n        if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n          servicePath = service.options['(google.api.default_host)'];\n        }\n\n        if (!servicePath) {\n          serviceCallback(new Error('Service path is undefined'));\n          return;\n        }\n\n        let servicePort;\n        const match = servicePath.match(/^(.*):(\\d+)$/);\n\n        if (match) {\n          servicePath = match[1];\n          servicePort = match[2];\n        }\n\n        if (opts.port) {\n          servicePort = opts.port;\n        } else if (!servicePort) {\n          servicePort = 443;\n        }\n\n        const protoNamespaces = [];\n        let currNamespace = methodObject.parent;\n\n        while (currNamespace.name !== '') {\n          protoNamespaces.unshift(currNamespace.name);\n          currNamespace = currNamespace.parent;\n        }\n\n        const protoServiceName = protoNamespaces.join('.');\n        const rpcName = methodObject.name;\n        let url;\n        let data;\n        let httpMethod; // TODO(@alexander-fenster): refactor this into separate function that prepares\n        // request object for `fetch`.\n\n        if (this.fallback === 'rest') {\n          // REGAPIC: JSON over HTTP/1 with gRPC trancoding\n          headers['Content-Type'] = 'application/json';\n          const decodedRequest = methodObject.resolvedRequestType.decode(requestData);\n          const requestJSON = methodObject.resolvedRequestType.toObject( // TODO: use toJSON instead of toObject\n          decodedRequest, {\n            enums: String,\n            longs: String\n          });\n          const transcoded = transcoding_1.transcode(requestJSON, methodObject.parsedOptions, methodObject.resolvedRequestType.fields);\n\n          if (!transcoded) {\n            throw new Error(`Cannot build HTTP request for ${JSON.stringify(requestJSON)}, method: ${methodObject.name}`);\n          }\n\n          httpMethod = transcoded.httpMethod;\n          data = JSON.stringify(transcoded.data);\n          url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\n        } else {\n          // gRPC-fallback: proto over HTTP/1\n          headers['Content-Type'] = 'application/x-protobuf';\n          httpMethod = 'post';\n          data = requestData;\n          url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\n        }\n\n        const fetch = isbrowser_1.isBrowser() ? // eslint-disable-next-line no-undef\n        window.fetch : node_fetch_1.default;\n        const fetchRequest = {\n          headers,\n          body: data,\n          method: httpMethod,\n          signal: cancelSignal\n        };\n\n        if (httpMethod === 'get' || httpMethod === 'delete' || httpMethod === 'head') {\n          delete fetchRequest['body'];\n        }\n\n        fetch(url, fetchRequest).then(response => {\n          return Promise.all([Promise.resolve(response.ok), response.arrayBuffer()]);\n        }).then(([ok, buffer]) => {\n          // TODO(@alexander-fenster): response processing to be moved\n          // to a separate function.\n          if (this.fallback === 'rest') {\n            // REGAPIC: JSON over HTTP/1\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            const decodedString = new TextDecoder().decode(buffer);\n            const response = JSON.parse(decodedString);\n\n            if (!ok) {\n              const error = Object.assign(new Error(response['error']['message']), response.error);\n              throw error;\n            }\n\n            const message = methodObject.resolvedResponseType.fromObject(response);\n            const encoded = methodObject.resolvedResponseType.encode(message).finish();\n            serviceCallback(null, encoded);\n          } else {\n            // gRPC-fallback: proto over HTTP/1\n            if (!ok) {\n              const error = statusDecoder.decodeErrorFromBuffer(buffer);\n              throw error;\n            }\n\n            serviceCallback(null, new Uint8Array(buffer));\n          }\n        }).catch(err => {\n          if (!cancelRequested || err.name !== 'AbortError') {\n            serviceCallback(err);\n          }\n        });\n        return {\n          cancel: () => {\n            if (!cancelController) {\n              console.warn('AbortController not found: Cancellation is not supported in this environment');\n              return;\n            }\n\n            cancelRequested = true;\n            cancelController.abort();\n          }\n        };\n      };\n    }\n\n    return grpcCompatibleServiceStub;\n  }\n\n}\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\r\n * gRPC-fallback version of lro\r\n *\r\n * @param {Object=} options.auth - An instance of google-auth-library.\r\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\r\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  const gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\r\n * gRPC-fallback version of createApiCall\r\n *\r\n * Converts an rpc call into an API call governed by the settings.\r\n *\r\n * In typical usage, `func` will be a promise to a callable used to make an rpc\r\n * request. This will mostly likely be a bound method from a request stub used\r\n * to make an rpc call. It is not a direct function but a Promise instance,\r\n * because of its asynchronism (typically, obtaining the auth information).\r\n *\r\n * The result is a function which manages the API call with the given settings\r\n * and the options on the invocation.\r\n *\r\n * Throws exception on unsupported streaming calls\r\n *\r\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\r\n *   a bare RPC call, or just a bare RPC call.\r\n * @param {CallSettings} settings - provides the settings for this call\r\n * @param {Descriptor} descriptor - optionally specify the descriptor for\r\n *   the method call.\r\n * @return {GaxCall} func - a bound method on a request stub used\r\n *   to make an rpc call.\r\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor) {\n    return () => {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nconst fallback = module.exports;\nexports.fallback = fallback;","map":{"version":3,"sources":["../../src/fallback.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a, _b;\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.version = exports.routingHeader = void 0;\r\n// Not all browsers support `TextEncoder`. The following `require` will\r\n// provide a fast UTF8-only replacement for those browsers that don't support\r\n// text encoding natively.\r\nconst isbrowser_1 = require(\"./isbrowser\");\r\nlet needTextEncoderPolyfill = false;\r\nif (isbrowser_1.isBrowser() &&\r\n    // eslint-disable-next-line node/no-unsupported-features/node-builtins\r\n    (typeof TextEncoder === 'undefined' || typeof TextDecoder === 'undefined')) {\r\n    needTextEncoderPolyfill = true;\r\n}\r\nif (typeof process !== 'undefined' && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node) && ((_b = process === null || process === void 0 ? void 0 : process.versions) === null || _b === void 0 ? void 0 : _b.node.match(/^10\\./))) {\r\n    // Node.js 10 does not have global TextDecoder\r\n    // TODO(@alexander-fenster): remove this logic after Node.js 10 is EOL.\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    const util = require('util');\r\n    Object.assign(global, {\r\n        TextDecoder: util.TextDecoder,\r\n        TextEncoder: util.TextEncoder,\r\n    });\r\n}\r\nif (needTextEncoderPolyfill) {\r\n    require('fast-text-encoding');\r\n}\r\nconst protobuf = require(\"protobufjs\");\r\nexports.protobuf = protobuf;\r\nconst gax = require(\"./gax\");\r\nconst node_fetch_1 = require(\"node-fetch\");\r\nconst routingHeader = require(\"./routingHeader\");\r\nexports.routingHeader = routingHeader;\r\nconst abort_controller_1 = require(\"abort-controller\");\r\nconst status_1 = require(\"./status\");\r\nconst google_auth_library_1 = require(\"google-auth-library\");\r\nconst objectHash = require(\"object-hash\");\r\nconst operationsClient_1 = require(\"./operationsClient\");\r\nconst createApiCall_1 = require(\"./createApiCall\");\r\nconst fallbackError_1 = require(\"./fallbackError\");\r\nconst transcoding_1 = require(\"./transcoding\");\r\nvar pathTemplate_1 = require(\"./pathTemplate\");\r\nObject.defineProperty(exports, \"PathTemplate\", { enumerable: true, get: function () { return pathTemplate_1.PathTemplate; } });\r\nvar gax_1 = require(\"./gax\");\r\nObject.defineProperty(exports, \"CallSettings\", { enumerable: true, get: function () { return gax_1.CallSettings; } });\r\nObject.defineProperty(exports, \"constructSettings\", { enumerable: true, get: function () { return gax_1.constructSettings; } });\r\nObject.defineProperty(exports, \"RetryOptions\", { enumerable: true, get: function () { return gax_1.RetryOptions; } });\r\nexports.version = require('../../package.json').version + '-fallback';\r\nvar descriptor_1 = require(\"./descriptor\");\r\nObject.defineProperty(exports, \"BundleDescriptor\", { enumerable: true, get: function () { return descriptor_1.BundleDescriptor; } });\r\nObject.defineProperty(exports, \"LongrunningDescriptor\", { enumerable: true, get: function () { return descriptor_1.LongrunningDescriptor; } });\r\nObject.defineProperty(exports, \"PageDescriptor\", { enumerable: true, get: function () { return descriptor_1.PageDescriptor; } });\r\nObject.defineProperty(exports, \"StreamDescriptor\", { enumerable: true, get: function () { return descriptor_1.StreamDescriptor; } });\r\nvar streaming_1 = require(\"./streamingCalls/streaming\");\r\nObject.defineProperty(exports, \"StreamType\", { enumerable: true, get: function () { return streaming_1.StreamType; } });\r\nconst CLIENT_VERSION_HEADER = 'x-goog-api-client';\r\nclass GrpcClient {\r\n    /**\r\n     * gRPC-fallback version of GrpcClient\r\n     * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\r\n     *\r\n     * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\r\n     *  to use in Node.js. Required for browser, optional for Node.js.\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        if (isbrowser_1.isBrowser()) {\r\n            if (!options.auth) {\r\n                throw new Error(JSON.stringify(options) +\r\n                    'You need to pass auth instance to use gRPC-fallback client in browser. Use OAuth2Client from google-auth-library.');\r\n            }\r\n            this.auth = options.auth;\r\n        }\r\n        else {\r\n            this.auth =\r\n                options.auth ||\r\n                    new google_auth_library_1.GoogleAuth(options);\r\n        }\r\n        this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\r\n        this.grpcVersion = require('../../package.json').version;\r\n    }\r\n    /**\r\n     * In rare cases users might need to deallocate all memory consumed by loaded protos.\r\n     * This method will delete the proto cache content.\r\n     */\r\n    static clearProtoCache() {\r\n        GrpcClient.protoCache.clear();\r\n    }\r\n    /**\r\n     * gRPC-fallback version of loadProto\r\n     * Loads the protobuf root object from a JSON object created from a proto file\r\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\r\n     * @returns {Object} Root namespace of proto JSON\r\n     */\r\n    loadProto(jsonObject) {\r\n        const rootObject = protobuf.Root.fromJSON(jsonObject);\r\n        return rootObject;\r\n    }\r\n    loadProtoJSON(json, ignoreCache = false) {\r\n        const hash = objectHash(json);\r\n        const cached = GrpcClient.protoCache.get(hash);\r\n        if (cached && !ignoreCache) {\r\n            return cached;\r\n        }\r\n        const root = protobuf.Root.fromJSON(json);\r\n        GrpcClient.protoCache.set(hash, root);\r\n        return root;\r\n    }\r\n    static getServiceMethods(service) {\r\n        const methods = {};\r\n        for (const [methodName, methodObject] of Object.entries(service.methods)) {\r\n            const methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\r\n            methods[methodNameLowerCamelCase] = methodObject;\r\n        }\r\n        return methods;\r\n    }\r\n    /**\r\n     * gRPC-fallback version of constructSettings\r\n     * A wrapper of {@link constructSettings} function under the gRPC context.\r\n     *\r\n     * Most of parameters are common among constructSettings, please take a look.\r\n     * @param {string} serviceName - The fullly-qualified name of the service.\r\n     * @param {Object} clientConfig - A dictionary of the client config.\r\n     * @param {Object} configOverrides - A dictionary of overriding configs.\r\n     * @param {Object} headers - A dictionary of additional HTTP header name to\r\n     *   its value.\r\n     * @return {Object} A mapping of method names to CallSettings.\r\n     */\r\n    constructSettings(serviceName, clientConfig, configOverrides, headers) {\r\n        function buildMetadata(abTests, moreHeaders) {\r\n            const metadata = {};\r\n            if (!headers) {\r\n                headers = {};\r\n            }\r\n            // Since gRPC expects each header to be an array,\r\n            // we are doing the same for fallback here.\r\n            for (const key in headers) {\r\n                metadata[key] = Array.isArray(headers[key])\r\n                    ? headers[key]\r\n                    : [headers[key]];\r\n            }\r\n            // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\r\n            const clientVersions = [];\r\n            if (metadata[CLIENT_VERSION_HEADER] &&\r\n                metadata[CLIENT_VERSION_HEADER][0]) {\r\n                clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(' '));\r\n            }\r\n            clientVersions.push(`grpc-web/${exports.version}`);\r\n            metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\r\n            if (!moreHeaders) {\r\n                return metadata;\r\n            }\r\n            for (const key in moreHeaders) {\r\n                if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {\r\n                    const value = moreHeaders[key];\r\n                    if (Array.isArray(value)) {\r\n                        if (metadata[key] === undefined) {\r\n                            metadata[key] = value;\r\n                        }\r\n                        else {\r\n                            if (Array.isArray(metadata[key])) {\r\n                                metadata[key].push(...value);\r\n                            }\r\n                            else {\r\n                                throw new Error(`Can not add value ${value} to the call metadata.`);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        metadata[key] = [value];\r\n                    }\r\n                }\r\n            }\r\n            return metadata;\r\n        }\r\n        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });\r\n    }\r\n    /**\r\n     * gRPC-fallback version of createStub\r\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\r\n     *\r\n     * @param {function} CreateStub - The constructor function of the stub.\r\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\r\n     * @param {Object} opts - Connection options, as described below.\r\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\r\n     * @param {number} opts.port - The port of the service.\r\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\r\n     */\r\n    async createStub(service, opts, \r\n    // For consistency with createStub in grpc.ts, customServicePath is defined:\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    customServicePath) {\r\n        // an RPC function to be passed to protobufjs RPC API\r\n        function serviceClientImpl(method, requestData, callback) {\r\n            return [requestData, callback];\r\n        }\r\n        // decoder for google.rpc.Status messages\r\n        const statusDecoder = new fallbackError_1.FallbackErrorDecoder();\r\n        if (!this.authClient) {\r\n            if (this.auth && 'getClient' in this.auth) {\r\n                this.authClient = await this.auth.getClient();\r\n            }\r\n            else if (this.auth && 'getRequestHeaders' in this.auth) {\r\n                this.authClient = this.auth;\r\n            }\r\n        }\r\n        if (!this.authClient) {\r\n            throw new Error('No authentication was provided');\r\n        }\r\n        const authHeader = await this.authClient.getRequestHeaders();\r\n        const serviceStub = service.create(serviceClientImpl, false, false);\r\n        const methods = GrpcClient.getServiceMethods(service);\r\n        // grpcCompatibleServiceStub methods accept four parameters:\r\n        // request, options, metadata, and callback - similar to\r\n        // the stub returned by grpc.ts\r\n        const grpcCompatibleServiceStub = service.create(serviceClientImpl, false, false);\r\n        for (const [methodName, methodObject] of Object.entries(methods)) {\r\n            grpcCompatibleServiceStub[methodName] = (req, options, metadata, callback) => {\r\n                const [requestData, serviceCallback] = serviceStub[methodName].apply(serviceStub, [\r\n                    methodObject.resolvedRequestType.fromObject(req),\r\n                    (err, response) => {\r\n                        if (!err) {\r\n                            // converts a protobuf message instance to a plain JavaScript object\r\n                            // with enum and long conversion options specified\r\n                            const responseObject = methodObject.resolvedResponseType.toObject(response, {\r\n                                enums: String,\r\n                                longs: String,\r\n                            });\r\n                            callback(null, responseObject);\r\n                        }\r\n                        else {\r\n                            callback(err);\r\n                        }\r\n                    },\r\n                ]);\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                let cancelController, cancelSignal;\r\n                if (isbrowser_1.isBrowser() || typeof AbortController !== 'undefined') {\r\n                    // eslint-disable-next-line no-undef\r\n                    cancelController = new AbortController();\r\n                }\r\n                else {\r\n                    cancelController = new abort_controller_1.AbortController();\r\n                }\r\n                if (cancelController) {\r\n                    cancelSignal = cancelController.signal;\r\n                }\r\n                let cancelRequested = false;\r\n                const headers = Object.assign({}, authHeader);\r\n                for (const key of Object.keys(options)) {\r\n                    headers[key] = options[key][0];\r\n                }\r\n                const grpcFallbackProtocol = opts.protocol || 'https';\r\n                let servicePath = opts.servicePath;\r\n                if (!servicePath &&\r\n                    service.options &&\r\n                    service.options['(google.api.default_host)']) {\r\n                    servicePath = service.options['(google.api.default_host)'];\r\n                }\r\n                if (!servicePath) {\r\n                    serviceCallback(new Error('Service path is undefined'));\r\n                    return;\r\n                }\r\n                let servicePort;\r\n                const match = servicePath.match(/^(.*):(\\d+)$/);\r\n                if (match) {\r\n                    servicePath = match[1];\r\n                    servicePort = match[2];\r\n                }\r\n                if (opts.port) {\r\n                    servicePort = opts.port;\r\n                }\r\n                else if (!servicePort) {\r\n                    servicePort = 443;\r\n                }\r\n                const protoNamespaces = [];\r\n                let currNamespace = methodObject.parent;\r\n                while (currNamespace.name !== '') {\r\n                    protoNamespaces.unshift(currNamespace.name);\r\n                    currNamespace = currNamespace.parent;\r\n                }\r\n                const protoServiceName = protoNamespaces.join('.');\r\n                const rpcName = methodObject.name;\r\n                let url;\r\n                let data;\r\n                let httpMethod;\r\n                // TODO(@alexander-fenster): refactor this into separate function that prepares\r\n                // request object for `fetch`.\r\n                if (this.fallback === 'rest') {\r\n                    // REGAPIC: JSON over HTTP/1 with gRPC trancoding\r\n                    headers['Content-Type'] = 'application/json';\r\n                    const decodedRequest = methodObject.resolvedRequestType.decode(requestData);\r\n                    const requestJSON = methodObject.resolvedRequestType.toObject(\r\n                    // TODO: use toJSON instead of toObject\r\n                    decodedRequest, {\r\n                        enums: String,\r\n                        longs: String,\r\n                    });\r\n                    const transcoded = transcoding_1.transcode(requestJSON, methodObject.parsedOptions, methodObject.resolvedRequestType.fields);\r\n                    if (!transcoded) {\r\n                        throw new Error(`Cannot build HTTP request for ${JSON.stringify(requestJSON)}, method: ${methodObject.name}`);\r\n                    }\r\n                    httpMethod = transcoded.httpMethod;\r\n                    data = JSON.stringify(transcoded.data);\r\n                    url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\\//, '')}?${transcoded.queryString}`;\r\n                }\r\n                else {\r\n                    // gRPC-fallback: proto over HTTP/1\r\n                    headers['Content-Type'] = 'application/x-protobuf';\r\n                    httpMethod = 'post';\r\n                    data = requestData;\r\n                    url = `${grpcFallbackProtocol}://${servicePath}:${servicePort}/$rpc/${protoServiceName}/${rpcName}`;\r\n                }\r\n                const fetch = isbrowser_1.isBrowser()\r\n                    ? // eslint-disable-next-line no-undef\r\n                        window.fetch\r\n                    : node_fetch_1.default;\r\n                const fetchRequest = {\r\n                    headers,\r\n                    body: data,\r\n                    method: httpMethod,\r\n                    signal: cancelSignal,\r\n                };\r\n                if (httpMethod === 'get' ||\r\n                    httpMethod === 'delete' ||\r\n                    httpMethod === 'head') {\r\n                    delete fetchRequest['body'];\r\n                }\r\n                fetch(url, fetchRequest)\r\n                    .then((response) => {\r\n                    return Promise.all([\r\n                        Promise.resolve(response.ok),\r\n                        response.arrayBuffer(),\r\n                    ]);\r\n                })\r\n                    .then(([ok, buffer]) => {\r\n                    // TODO(@alexander-fenster): response processing to be moved\r\n                    // to a separate function.\r\n                    if (this.fallback === 'rest') {\r\n                        // REGAPIC: JSON over HTTP/1\r\n                        // eslint-disable-next-line node/no-unsupported-features/node-builtins\r\n                        const decodedString = new TextDecoder().decode(buffer);\r\n                        const response = JSON.parse(decodedString);\r\n                        if (!ok) {\r\n                            const error = Object.assign(new Error(response['error']['message']), response.error);\r\n                            throw error;\r\n                        }\r\n                        const message = methodObject.resolvedResponseType.fromObject(response);\r\n                        const encoded = methodObject\r\n                            .resolvedResponseType.encode(message)\r\n                            .finish();\r\n                        serviceCallback(null, encoded);\r\n                    }\r\n                    else {\r\n                        // gRPC-fallback: proto over HTTP/1\r\n                        if (!ok) {\r\n                            const error = statusDecoder.decodeErrorFromBuffer(buffer);\r\n                            throw error;\r\n                        }\r\n                        serviceCallback(null, new Uint8Array(buffer));\r\n                    }\r\n                })\r\n                    .catch((err) => {\r\n                    if (!cancelRequested || err.name !== 'AbortError') {\r\n                        serviceCallback(err);\r\n                    }\r\n                });\r\n                return {\r\n                    cancel: () => {\r\n                        if (!cancelController) {\r\n                            console.warn('AbortController not found: Cancellation is not supported in this environment');\r\n                            return;\r\n                        }\r\n                        cancelRequested = true;\r\n                        cancelController.abort();\r\n                    },\r\n                };\r\n            };\r\n        }\r\n        return grpcCompatibleServiceStub;\r\n    }\r\n}\r\nexports.GrpcClient = GrpcClient;\r\nGrpcClient.protoCache = new Map();\r\n/**\r\n * gRPC-fallback version of lro\r\n *\r\n * @param {Object=} options.auth - An instance of google-auth-library.\r\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\r\n */\r\nfunction lro(options) {\r\n    options = Object.assign({ scopes: [] }, options);\r\n    const gaxGrpc = new GrpcClient(options);\r\n    return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\r\n}\r\nexports.lro = lro;\r\n/**\r\n * gRPC-fallback version of createApiCall\r\n *\r\n * Converts an rpc call into an API call governed by the settings.\r\n *\r\n * In typical usage, `func` will be a promise to a callable used to make an rpc\r\n * request. This will mostly likely be a bound method from a request stub used\r\n * to make an rpc call. It is not a direct function but a Promise instance,\r\n * because of its asynchronism (typically, obtaining the auth information).\r\n *\r\n * The result is a function which manages the API call with the given settings\r\n * and the options on the invocation.\r\n *\r\n * Throws exception on unsupported streaming calls\r\n *\r\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\r\n *   a bare RPC call, or just a bare RPC call.\r\n * @param {CallSettings} settings - provides the settings for this call\r\n * @param {Descriptor} descriptor - optionally specify the descriptor for\r\n *   the method call.\r\n * @return {GaxCall} func - a bound method on a request stub used\r\n *   to make an rpc call.\r\n */\r\nfunction createApiCall(func, settings, descriptor) {\r\n    if (descriptor && 'streaming' in descriptor) {\r\n        return () => {\r\n            throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\r\n        };\r\n    }\r\n    return createApiCall_1.createApiCall(func, settings, descriptor);\r\n}\r\nexports.createApiCall = createApiCall;\r\nexports.protobufMinimal = require(\"protobufjs/minimal\");\r\n// Different environments or bundlers may or may not respect \"browser\" field\r\n// in package.json (e.g. Electron does not respect it, but if you run the code\r\n// through webpack first, it will follow the \"browser\" field).\r\n// To make it safer and more compatible, let's make sure that if you do\r\n// const gax = require(\"google-gax\");\r\n// you can always ask for gax.fallback, regardless of \"browser\" field being\r\n// understood or not.\r\nconst fallback = module.exports;\r\nexports.fallback = fallback;\r\n//# sourceMappingURL=fallback.js.map"]},"metadata":{},"sourceType":"script"}