{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/**\r\n * The default `Storage` service if no\r\n * app is provided or the `Storage` service associated with the provided\r\n * app.\r\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\r\n   * @param {FirebaseApp} app The app for this Storage service.\r\n   * @constructor\r\n   * @internal\r\n   */\n  function Storage(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-argument',\n        message: 'First argument passed to admin.storage() must be a valid Firebase app instance.'\n      });\n    }\n\n    if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\n      var firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n\n      if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\n        throw new error_1.FirebaseError({\n          code: 'storage/invalid-emulator-host',\n          message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).'\n        });\n      }\n\n      process.env.STORAGE_EMULATOR_HOST = \"http://\" + process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n    }\n\n    var storage;\n\n    try {\n      storage = require('@google-cloud/storage').Storage;\n    } catch (err) {\n      throw new error_1.FirebaseError({\n        code: 'storage/missing-dependencies',\n        message: 'Failed to import the Cloud Storage client library for Node.js. ' + 'Make sure to install the \"@google-cloud/storage\" npm package. ' + (\"Original error: \" + err)\n      });\n    }\n\n    var projectId = utils.getExplicitProjectId(app);\n    var credential = app.options.credential;\n\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n      this.storageClient = new storage({\n        // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n        // guaranteed to be available.\n        projectId: projectId,\n        credentials: {\n          private_key: credential.privateKey,\n          client_email: credential.clientEmail\n        }\n      });\n    } else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n      // Try to use the Google application default credentials.\n      this.storageClient = new storage();\n    } else {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-credential',\n        message: 'Failed to initialize Google Cloud Storage client with the available credential. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Storage API.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n  /**\r\n   * @param name Optional name of the bucket to be retrieved. If name is not specified,\r\n   * retrieves a reference to the default bucket.\r\n   * @returns A [Bucket](https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket)\r\n   * instance as defined in the `@google-cloud/storage` package.\r\n   */\n\n\n  Storage.prototype.bucket = function (name) {\n    var bucketName = typeof name !== 'undefined' ? name : this.appInternal.options.storageBucket;\n\n    if (validator.isNonEmptyString(bucketName)) {\n      return this.storageClient.bucket(bucketName);\n    }\n\n    throw new error_1.FirebaseError({\n      code: 'storage/invalid-argument',\n      message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the getBucket() method.'\n    });\n  };\n\n  Object.defineProperty(Storage.prototype, \"app\", {\n    /**\r\n     * @return The app associated with this Storage instance.\r\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/storage/storage.js"],"names":["Object","defineProperty","exports","value","Storage","error_1","require","credential_internal_1","utils","validator","app","isNonNullObject","FirebaseError","code","message","process","env","STORAGE_EMULATOR_HOST","FIREBASE_STORAGE_EMULATOR_HOST","firebaseStorageEmulatorHost","match","storage","err","projectId","getExplicitProjectId","credential","options","ServiceAccountCredential","storageClient","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","appInternal","prototype","bucket","name","bucketName","storageBucket","isNonEmptyString","get","enumerable","configurable"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Storage = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar credential_internal_1 = require(\"../credential/credential-internal\");\r\nvar utils = require(\"../utils/index\");\r\nvar validator = require(\"../utils/validator\");\r\n/**\r\n * The default `Storage` service if no\r\n * app is provided or the `Storage` service associated with the provided\r\n * app.\r\n */\r\nvar Storage = /** @class */ (function () {\r\n    /**\r\n     * @param {FirebaseApp} app The app for this Storage service.\r\n     * @constructor\r\n     * @internal\r\n     */\r\n    function Storage(app) {\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/invalid-argument',\r\n                message: 'First argument passed to admin.storage() must be a valid Firebase app instance.',\r\n            });\r\n        }\r\n        if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\r\n            var firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\r\n            if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\r\n                throw new error_1.FirebaseError({\r\n                    code: 'storage/invalid-emulator-host',\r\n                    message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).',\r\n                });\r\n            }\r\n            process.env.STORAGE_EMULATOR_HOST = \"http://\" + process.env.FIREBASE_STORAGE_EMULATOR_HOST;\r\n        }\r\n        var storage;\r\n        try {\r\n            storage = require('@google-cloud/storage').Storage;\r\n        }\r\n        catch (err) {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/missing-dependencies',\r\n                message: 'Failed to import the Cloud Storage client library for Node.js. '\r\n                    + 'Make sure to install the \"@google-cloud/storage\" npm package. '\r\n                    + (\"Original error: \" + err),\r\n            });\r\n        }\r\n        var projectId = utils.getExplicitProjectId(app);\r\n        var credential = app.options.credential;\r\n        if (credential instanceof credential_internal_1.ServiceAccountCredential) {\r\n            this.storageClient = new storage({\r\n                // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\r\n                // guaranteed to be available.\r\n                projectId: projectId,\r\n                credentials: {\r\n                    private_key: credential.privateKey,\r\n                    client_email: credential.clientEmail,\r\n                },\r\n            });\r\n        }\r\n        else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\r\n            // Try to use the Google application default credentials.\r\n            this.storageClient = new storage();\r\n        }\r\n        else {\r\n            throw new error_1.FirebaseError({\r\n                code: 'storage/invalid-credential',\r\n                message: 'Failed to initialize Google Cloud Storage client with the available credential. ' +\r\n                    'Must initialize the SDK with a certificate credential or application default credentials ' +\r\n                    'to use Cloud Storage API.',\r\n            });\r\n        }\r\n        this.appInternal = app;\r\n    }\r\n    /**\r\n     * @param name Optional name of the bucket to be retrieved. If name is not specified,\r\n     * retrieves a reference to the default bucket.\r\n     * @returns A [Bucket](https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket)\r\n     * instance as defined in the `@google-cloud/storage` package.\r\n     */\r\n    Storage.prototype.bucket = function (name) {\r\n        var bucketName = (typeof name !== 'undefined')\r\n            ? name : this.appInternal.options.storageBucket;\r\n        if (validator.isNonEmptyString(bucketName)) {\r\n            return this.storageClient.bucket(bucketName);\r\n        }\r\n        throw new error_1.FirebaseError({\r\n            code: 'storage/invalid-argument',\r\n            message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' +\r\n                'storageBucket option when initializing the app, or specify the bucket name ' +\r\n                'explicitly when calling the getBucket() method.',\r\n        });\r\n    };\r\n    Object.defineProperty(Storage.prototype, \"app\", {\r\n        /**\r\n         * @return The app associated with this Storage instance.\r\n         */\r\n        get: function () {\r\n            return this.appInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return Storage;\r\n}());\r\nexports.Storage = Storage;\r\n"]},"metadata":{},"sourceType":"script"}