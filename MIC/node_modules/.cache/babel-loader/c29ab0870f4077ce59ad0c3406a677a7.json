{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appCheckErrorFromCryptoSignerError = exports.AppCheckTokenGenerator = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // Audience to use for Firebase App Check Custom tokens\n\nvar FIREBASE_APP_CHECK_AUDIENCE = 'https://firebaseappcheck.googleapis.com/google.firebase.appcheck.v1beta.TokenExchangeService';\n/**\r\n * Class for generating Firebase App Check tokens.\r\n *\r\n * @internal\r\n */\n\nvar AppCheckTokenGenerator =\n/** @class */\nfunction () {\n  /**\r\n   * The AppCheckTokenGenerator class constructor.\r\n   *\r\n   * @param signer The CryptoSigner instance for this token generator.\r\n   * @constructor\r\n   */\n  function AppCheckTokenGenerator(signer) {\n    if (!validator.isNonNullObject(signer)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'INTERNAL ASSERT: Must provide a CryptoSigner to use AppCheckTokenGenerator.');\n    }\n\n    this.signer = signer;\n  }\n  /**\r\n   * Creates a new custom token that can be exchanged to an App Check token.\r\n   *\r\n   * @param appId The Application ID to use for the generated token.\r\n   *\r\n   * @return A Promise fulfilled with a custom token signed with a service account key\r\n   * that can be exchanged to an App Check token.\r\n   */\n\n\n  AppCheckTokenGenerator.prototype.createCustomToken = function (appId) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: _this.signer.algorithm,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        iss: account,\n        sub: account,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        app_id: appId,\n        aud: FIREBASE_APP_CHECK_AUDIENCE,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iat: iat\n      };\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      return _this.signer.sign(Buffer.from(token)).then(function (signature) {\n        return token + \".\" + _this.encodeSegment(signature);\n      });\n    }).catch(function (err) {\n      throw appCheckErrorFromCryptoSignerError(err);\n    });\n  };\n\n  AppCheckTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n  };\n\n  return AppCheckTokenGenerator;\n}();\n\nexports.AppCheckTokenGenerator = AppCheckTokenGenerator;\n/**\r\n * Creates a new FirebaseAppCheckError by extracting the error code, message and other relevant\r\n * details from a CryptoSignerError.\r\n *\r\n * @param err The Error to convert into a FirebaseAppCheckError error\r\n * @return A Firebase App Check error that can be returned to the user.\r\n */\n\nfunction appCheckErrorFromCryptoSignerError(err) {\n  if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n    return err;\n  }\n\n  if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n    var httpError = err.cause;\n    var errorResponse = httpError.response.data;\n\n    if (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.error) {\n      var status = errorResponse.error.status;\n      var description = errorResponse.error.message || JSON.stringify(httpError.response);\n      var code = 'unknown-error';\n\n      if (status && status in app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING) {\n        code = app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING[status];\n      }\n\n      return new app_check_api_client_internal_1.FirebaseAppCheckError(code, \"Error returned from server while siging a custom token: \" + description);\n    }\n\n    return new app_check_api_client_internal_1.FirebaseAppCheckError('internal-error', 'Error returned from server: ' + JSON.stringify(errorResponse) + '.');\n  }\n\n  return new app_check_api_client_internal_1.FirebaseAppCheckError(mapToAppCheckErrorCode(err.code), err.message);\n}\n\nexports.appCheckErrorFromCryptoSignerError = appCheckErrorFromCryptoSignerError;\n\nfunction mapToAppCheckErrorCode(code) {\n  switch (code) {\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n      return 'invalid-credential';\n\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n      return 'invalid-argument';\n\n    default:\n      return 'internal-error';\n  }\n}","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/app-check/token-generator.js"],"names":["Object","defineProperty","exports","value","appCheckErrorFromCryptoSignerError","AppCheckTokenGenerator","validator","require","utils_1","crypto_signer_1","app_check_api_client_internal_1","ONE_HOUR_IN_SECONDS","FIREBASE_APP_CHECK_AUDIENCE","signer","isNonNullObject","FirebaseAppCheckError","prototype","createCustomToken","appId","_this","isNonEmptyString","getAccountId","then","account","header","alg","algorithm","typ","iat","Math","floor","Date","now","body","iss","sub","app_id","aud","exp","token","encodeSegment","sign","Buffer","from","signature","catch","err","segment","buffer","JSON","stringify","toWebSafeBase64","replace","CryptoSignerError","code","CryptoSignerErrorCode","SERVER_ERROR","cause","httpError","errorResponse","response","data","error","status","description","message","APP_CHECK_ERROR_CODE_MAPPING","mapToAppCheckErrorCode","INVALID_CREDENTIAL","INVALID_ARGUMENT"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kCAAR,GAA6CF,OAAO,CAACG,sBAAR,GAAiC,KAAK,CAAnF;;AACA,IAAIC,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,wBAAD,CAA7B;;AACA,IAAIG,+BAA+B,GAAGH,OAAO,CAAC,iCAAD,CAA7C;;AACA,IAAII,mBAAmB,GAAG,KAAK,EAA/B,C,CACA;;AACA,IAAIC,2BAA2B,GAAG,8FAAlC;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIP,sBAAsB;AAAG;AAAe,YAAY;AACpD;AACJ;AACA;AACA;AACA;AACA;AACI,WAASA,sBAAT,CAAgCQ,MAAhC,EAAwC;AACpC,QAAI,CAACP,SAAS,CAACQ,eAAV,CAA0BD,MAA1B,CAAL,EAAwC;AACpC,YAAM,IAAIH,+BAA+B,CAACK,qBAApC,CAA0D,kBAA1D,EAA8E,6EAA9E,CAAN;AACH;;AACD,SAAKF,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIR,EAAAA,sBAAsB,CAACW,SAAvB,CAAiCC,iBAAjC,GAAqD,UAAUC,KAAV,EAAiB;AAClE,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAACb,SAAS,CAACc,gBAAV,CAA2BF,KAA3B,CAAL,EAAwC;AACpC,YAAM,IAAIR,+BAA+B,CAACK,qBAApC,CAA0D,kBAA1D,EAA8E,qCAA9E,CAAN;AACH;;AACD,WAAO,KAAKF,MAAL,CAAYQ,YAAZ,GAA2BC,IAA3B,CAAgC,UAAUC,OAAV,EAAmB;AACtD,UAAIC,MAAM,GAAG;AACTC,QAAAA,GAAG,EAAEN,KAAK,CAACN,MAAN,CAAaa,SADT;AAETC,QAAAA,GAAG,EAAE;AAFI,OAAb;AAIA,UAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAV;AACA,UAAIC,IAAI,GAAG;AACPC,QAAAA,GAAG,EAAEX,OADE;AAEPY,QAAAA,GAAG,EAAEZ,OAFE;AAGP;AACAa,QAAAA,MAAM,EAAElB,KAJD;AAKPmB,QAAAA,GAAG,EAAEzB,2BALE;AAMP0B,QAAAA,GAAG,EAAEV,GAAG,GAAGjB,mBANJ;AAOPiB,QAAAA,GAAG,EAAEA;AAPE,OAAX;;AASA,UAAIW,KAAK,GAAGpB,KAAK,CAACqB,aAAN,CAAoBhB,MAApB,IAA8B,GAA9B,GAAoCL,KAAK,CAACqB,aAAN,CAAoBP,IAApB,CAAhD;;AACA,aAAOd,KAAK,CAACN,MAAN,CAAa4B,IAAb,CAAkBC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,CAAlB,EACFjB,IADE,CACG,UAAUsB,SAAV,EAAqB;AAC3B,eAAOL,KAAK,GAAG,GAAR,GAAcpB,KAAK,CAACqB,aAAN,CAAoBI,SAApB,CAArB;AACH,OAHM,CAAP;AAIH,KApBM,EAoBJC,KApBI,CAoBE,UAAUC,GAAV,EAAe;AACpB,YAAM1C,kCAAkC,CAAC0C,GAAD,CAAxC;AACH,KAtBM,CAAP;AAuBH,GA5BD;;AA6BAzC,EAAAA,sBAAsB,CAACW,SAAvB,CAAiCwB,aAAjC,GAAiD,UAAUO,OAAV,EAAmB;AAChE,QAAIC,MAAM,GAAID,OAAO,YAAYL,MAApB,GAA8BK,OAA9B,GAAwCL,MAAM,CAACC,IAAP,CAAYM,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAZ,CAArD;AACA,WAAOvC,OAAO,CAAC2C,eAAR,CAAwBH,MAAxB,EAAgCI,OAAhC,CAAwC,KAAxC,EAA+C,EAA/C,CAAP;AACH,GAHD;;AAIA,SAAO/C,sBAAP;AACH,CAvD2C,EAA5C;;AAwDAH,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,kCAAT,CAA4C0C,GAA5C,EAAiD;AAC7C,MAAI,EAAEA,GAAG,YAAYrC,eAAe,CAAC4C,iBAAjC,CAAJ,EAAyD;AACrD,WAAOP,GAAP;AACH;;AACD,MAAIA,GAAG,CAACQ,IAAJ,KAAa7C,eAAe,CAAC8C,qBAAhB,CAAsCC,YAAnD,IAAmElD,SAAS,CAACQ,eAAV,CAA0BgC,GAAG,CAACW,KAA9B,CAAvE,EAA6G;AACzG,QAAIC,SAAS,GAAGZ,GAAG,CAACW,KAApB;AACA,QAAIE,aAAa,GAAGD,SAAS,CAACE,QAAV,CAAmBC,IAAvC;;AACA,QAAIF,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,aAAa,CAACG,KAAhF,EAAuF;AACnF,UAAIC,MAAM,GAAGJ,aAAa,CAACG,KAAd,CAAoBC,MAAjC;AACA,UAAIC,WAAW,GAAGL,aAAa,CAACG,KAAd,CAAoBG,OAApB,IAA+BhB,IAAI,CAACC,SAAL,CAAeQ,SAAS,CAACE,QAAzB,CAAjD;AACA,UAAIN,IAAI,GAAG,eAAX;;AACA,UAAIS,MAAM,IAAIA,MAAM,IAAIrD,+BAA+B,CAACwD,4BAAxD,EAAsF;AAClFZ,QAAAA,IAAI,GAAG5C,+BAA+B,CAACwD,4BAAhC,CAA6DH,MAA7D,CAAP;AACH;;AACD,aAAO,IAAIrD,+BAA+B,CAACK,qBAApC,CAA0DuC,IAA1D,EAAgE,6DAA6DU,WAA7H,CAAP;AACH;;AACD,WAAO,IAAItD,+BAA+B,CAACK,qBAApC,CAA0D,gBAA1D,EAA4E,iCAAiCkC,IAAI,CAACC,SAAL,CAAeS,aAAf,CAAjC,GAAiE,GAA7I,CAAP;AACH;;AACD,SAAO,IAAIjD,+BAA+B,CAACK,qBAApC,CAA0DoD,sBAAsB,CAACrB,GAAG,CAACQ,IAAL,CAAhF,EAA4FR,GAAG,CAACmB,OAAhG,CAAP;AACH;;AACD/D,OAAO,CAACE,kCAAR,GAA6CA,kCAA7C;;AACA,SAAS+D,sBAAT,CAAgCb,IAAhC,EAAsC;AAClC,UAAQA,IAAR;AACI,SAAK7C,eAAe,CAAC8C,qBAAhB,CAAsCa,kBAA3C;AACI,aAAO,oBAAP;;AACJ,SAAK3D,eAAe,CAAC8C,qBAAhB,CAAsCc,gBAA3C;AACI,aAAO,kBAAP;;AACJ;AACI,aAAO,gBAAP;AANR;AAQH","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.appCheckErrorFromCryptoSignerError = exports.AppCheckTokenGenerator = void 0;\r\nvar validator = require(\"../utils/validator\");\r\nvar utils_1 = require(\"../utils\");\r\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\r\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\r\nvar ONE_HOUR_IN_SECONDS = 60 * 60;\r\n// Audience to use for Firebase App Check Custom tokens\r\nvar FIREBASE_APP_CHECK_AUDIENCE = 'https://firebaseappcheck.googleapis.com/google.firebase.appcheck.v1beta.TokenExchangeService';\r\n/**\r\n * Class for generating Firebase App Check tokens.\r\n *\r\n * @internal\r\n */\r\nvar AppCheckTokenGenerator = /** @class */ (function () {\r\n    /**\r\n     * The AppCheckTokenGenerator class constructor.\r\n     *\r\n     * @param signer The CryptoSigner instance for this token generator.\r\n     * @constructor\r\n     */\r\n    function AppCheckTokenGenerator(signer) {\r\n        if (!validator.isNonNullObject(signer)) {\r\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'INTERNAL ASSERT: Must provide a CryptoSigner to use AppCheckTokenGenerator.');\r\n        }\r\n        this.signer = signer;\r\n    }\r\n    /**\r\n     * Creates a new custom token that can be exchanged to an App Check token.\r\n     *\r\n     * @param appId The Application ID to use for the generated token.\r\n     *\r\n     * @return A Promise fulfilled with a custom token signed with a service account key\r\n     * that can be exchanged to an App Check token.\r\n     */\r\n    AppCheckTokenGenerator.prototype.createCustomToken = function (appId) {\r\n        var _this = this;\r\n        if (!validator.isNonEmptyString(appId)) {\r\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\r\n        }\r\n        return this.signer.getAccountId().then(function (account) {\r\n            var header = {\r\n                alg: _this.signer.algorithm,\r\n                typ: 'JWT',\r\n            };\r\n            var iat = Math.floor(Date.now() / 1000);\r\n            var body = {\r\n                iss: account,\r\n                sub: account,\r\n                // eslint-disable-next-line @typescript-eslint/camelcase\r\n                app_id: appId,\r\n                aud: FIREBASE_APP_CHECK_AUDIENCE,\r\n                exp: iat + ONE_HOUR_IN_SECONDS,\r\n                iat: iat,\r\n            };\r\n            var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\r\n            return _this.signer.sign(Buffer.from(token))\r\n                .then(function (signature) {\r\n                return token + \".\" + _this.encodeSegment(signature);\r\n            });\r\n        }).catch(function (err) {\r\n            throw appCheckErrorFromCryptoSignerError(err);\r\n        });\r\n    };\r\n    AppCheckTokenGenerator.prototype.encodeSegment = function (segment) {\r\n        var buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\r\n        return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\r\n    };\r\n    return AppCheckTokenGenerator;\r\n}());\r\nexports.AppCheckTokenGenerator = AppCheckTokenGenerator;\r\n/**\r\n * Creates a new FirebaseAppCheckError by extracting the error code, message and other relevant\r\n * details from a CryptoSignerError.\r\n *\r\n * @param err The Error to convert into a FirebaseAppCheckError error\r\n * @return A Firebase App Check error that can be returned to the user.\r\n */\r\nfunction appCheckErrorFromCryptoSignerError(err) {\r\n    if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\r\n        return err;\r\n    }\r\n    if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\r\n        var httpError = err.cause;\r\n        var errorResponse = httpError.response.data;\r\n        if (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.error) {\r\n            var status = errorResponse.error.status;\r\n            var description = errorResponse.error.message || JSON.stringify(httpError.response);\r\n            var code = 'unknown-error';\r\n            if (status && status in app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING) {\r\n                code = app_check_api_client_internal_1.APP_CHECK_ERROR_CODE_MAPPING[status];\r\n            }\r\n            return new app_check_api_client_internal_1.FirebaseAppCheckError(code, \"Error returned from server while siging a custom token: \" + description);\r\n        }\r\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('internal-error', 'Error returned from server: ' + JSON.stringify(errorResponse) + '.');\r\n    }\r\n    return new app_check_api_client_internal_1.FirebaseAppCheckError(mapToAppCheckErrorCode(err.code), err.message);\r\n}\r\nexports.appCheckErrorFromCryptoSignerError = appCheckErrorFromCryptoSignerError;\r\nfunction mapToAppCheckErrorCode(code) {\r\n    switch (code) {\r\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\r\n            return 'invalid-credential';\r\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\r\n            return 'invalid-argument';\r\n        default:\r\n            return 'internal-error';\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}