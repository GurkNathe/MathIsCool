{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleCryptoSignerError = exports.FirebaseTokenGenerator = exports.EmulatedSigner = exports.BLACKLISTED_CLAIMS = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ALGORITHM_NONE = 'none';\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // List of blacklisted claims which cannot be provided when creating a custom token\n\nexports.BLACKLISTED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce']; // Audience to use for Firebase Auth Custom tokens\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\r\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\r\n * It produces unsigned tokens.\r\n */\n\nvar EmulatedSigner =\n/** @class */\nfunction () {\n  function EmulatedSigner() {\n    this.algorithm = ALGORITHM_NONE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  EmulatedSigner.prototype.sign = function (buffer) {\n    return Promise.resolve(Buffer.from(''));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  EmulatedSigner.prototype.getAccountId = function () {\n    return Promise.resolve('firebase-auth-emulator@example.com');\n  };\n\n  return EmulatedSigner;\n}();\n\nexports.EmulatedSigner = EmulatedSigner;\n/**\r\n * Class for generating different types of Firebase Auth tokens (JWTs).\r\n */\n\nvar FirebaseTokenGenerator =\n/** @class */\nfunction () {\n  /**\r\n   * @param tenantId The tenant ID to use for the generated Firebase Auth\r\n   *     Custom token. If absent, then no tenant ID claim will be set in the\r\n   *     resulting JWT.\r\n   */\n  function FirebaseTokenGenerator(signer, tenantId) {\n    this.tenantId = tenantId;\n\n    if (!validator.isNonNullObject(signer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n    }\n\n    if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n    }\n\n    this.signer = signer;\n  }\n  /**\r\n   * Creates a new Firebase Auth Custom token.\r\n   *\r\n   * @param uid The user ID to use for the generated Firebase Auth Custom token.\r\n   * @param developerClaims Optional developer claims to include in the generated Firebase\r\n   *     Auth Custom token.\r\n   * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\r\n   *     service account key and containing the provided payload.\r\n   */\n\n\n  FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (!validator.isNonEmptyString(uid)) {\n      errorMessage = '`uid` argument must be a non-empty string uid.';\n    } else if (uid.length > 128) {\n      errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n    } else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n      errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    var claims = {};\n\n    if (typeof developerClaims !== 'undefined') {\n      for (var key in developerClaims) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\n          if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n          }\n\n          claims[key] = developerClaims[key];\n        }\n      }\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: _this.signer.algorithm,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        aud: FIREBASE_AUDIENCE,\n        iat: iat,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iss: account,\n        sub: account,\n        uid: uid\n      };\n\n      if (_this.tenantId) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        body.tenant_id = _this.tenantId;\n      }\n\n      if (Object.keys(claims).length > 0) {\n        body.claims = claims;\n      }\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      var signPromise = _this.signer.sign(Buffer.from(token));\n\n      return Promise.all([token, signPromise]);\n    }).then(function (_a) {\n      var token = _a[0],\n          signature = _a[1];\n      return token + \".\" + _this.encodeSegment(signature);\n    }).catch(function (err) {\n      throw handleCryptoSignerError(err);\n    });\n  };\n\n  FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n  };\n  /**\r\n   * Returns whether or not the provided developer claims are valid.\r\n   *\r\n   * @param {object} [developerClaims] Optional developer claims to validate.\r\n   * @return {boolean} True if the provided claims are valid; otherwise, false.\r\n   */\n\n\n  FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n    if (typeof developerClaims === 'undefined') {\n      return true;\n    }\n\n    return validator.isNonNullObject(developerClaims);\n  };\n\n  return FirebaseTokenGenerator;\n}();\n\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\n/**\r\n * Creates a new FirebaseAuthError by extracting the error code, message and other relevant\r\n * details from a CryptoSignerError.\r\n *\r\n * @param {Error} err The Error to convert into a FirebaseAuthError error\r\n * @return {FirebaseAuthError} A Firebase Auth error that can be returned to the user.\r\n */\n\nfunction handleCryptoSignerError(err) {\n  if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n    return err;\n  }\n\n  if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n    var httpError = err.cause;\n    var errorResponse = httpError.response.data;\n\n    if (validator.isNonNullObject(errorResponse) && errorResponse.error) {\n      var errorCode = errorResponse.error.status;\n      var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' + 'for more details on how to use and troubleshoot this feature.';\n      var errorMsg = errorResponse.error.message + \"; \" + description;\n      return error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, errorResponse);\n    }\n\n    return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + errorResponse + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n  }\n\n  return new error_1.FirebaseAuthError(mapToAuthClientErrorCode(err.code), err.message);\n}\n\nexports.handleCryptoSignerError = handleCryptoSignerError;\n\nfunction mapToAuthClientErrorCode(code) {\n  switch (code) {\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n      return error_1.AuthClientErrorCode.INVALID_CREDENTIAL;\n\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n      return error_1.AuthClientErrorCode.INVALID_ARGUMENT;\n\n    default:\n      return error_1.AuthClientErrorCode.INTERNAL_ERROR;\n  }\n}","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/auth/token-generator.js"],"names":["Object","defineProperty","exports","value","handleCryptoSignerError","FirebaseTokenGenerator","EmulatedSigner","BLACKLISTED_CLAIMS","error_1","require","crypto_signer_1","validator","utils_1","ALGORITHM_NONE","ONE_HOUR_IN_SECONDS","FIREBASE_AUDIENCE","algorithm","prototype","sign","buffer","Promise","resolve","Buffer","from","getAccountId","signer","tenantId","isNonNullObject","FirebaseAuthError","AuthClientErrorCode","INVALID_CREDENTIAL","isNonEmptyString","INVALID_ARGUMENT","createCustomToken","uid","developerClaims","_this","errorMessage","length","isDeveloperClaimsValid_","claims","key","hasOwnProperty","call","indexOf","then","account","header","alg","typ","iat","Math","floor","Date","now","body","aud","exp","iss","sub","tenant_id","keys","token","encodeSegment","signPromise","all","_a","signature","catch","err","segment","JSON","stringify","toWebSafeBase64","replace","CryptoSignerError","code","CryptoSignerErrorCode","SERVER_ERROR","cause","httpError","errorResponse","response","data","error","errorCode","status","description","errorMsg","message","fromServerError","INTERNAL_ERROR","mapToAuthClientErrorCode"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.handleCryptoSignerError = exports.FirebaseTokenGenerator = exports.EmulatedSigner = exports.BLACKLISTED_CLAIMS = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\r\nvar validator = require(\"../utils/validator\");\r\nvar utils_1 = require(\"../utils\");\r\nvar ALGORITHM_NONE = 'none';\r\nvar ONE_HOUR_IN_SECONDS = 60 * 60;\r\n// List of blacklisted claims which cannot be provided when creating a custom token\r\nexports.BLACKLISTED_CLAIMS = [\r\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti',\r\n    'nbf', 'nonce',\r\n];\r\n// Audience to use for Firebase Auth Custom tokens\r\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\r\n/**\r\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\r\n * It produces unsigned tokens.\r\n */\r\nvar EmulatedSigner = /** @class */ (function () {\r\n    function EmulatedSigner() {\r\n        this.algorithm = ALGORITHM_NONE;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    EmulatedSigner.prototype.sign = function (buffer) {\r\n        return Promise.resolve(Buffer.from(''));\r\n    };\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    EmulatedSigner.prototype.getAccountId = function () {\r\n        return Promise.resolve('firebase-auth-emulator@example.com');\r\n    };\r\n    return EmulatedSigner;\r\n}());\r\nexports.EmulatedSigner = EmulatedSigner;\r\n/**\r\n * Class for generating different types of Firebase Auth tokens (JWTs).\r\n */\r\nvar FirebaseTokenGenerator = /** @class */ (function () {\r\n    /**\r\n     * @param tenantId The tenant ID to use for the generated Firebase Auth\r\n     *     Custom token. If absent, then no tenant ID claim will be set in the\r\n     *     resulting JWT.\r\n     */\r\n    function FirebaseTokenGenerator(signer, tenantId) {\r\n        this.tenantId = tenantId;\r\n        if (!validator.isNonNullObject(signer)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\r\n        }\r\n        if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\r\n        }\r\n        this.signer = signer;\r\n    }\r\n    /**\r\n     * Creates a new Firebase Auth Custom token.\r\n     *\r\n     * @param uid The user ID to use for the generated Firebase Auth Custom token.\r\n     * @param developerClaims Optional developer claims to include in the generated Firebase\r\n     *     Auth Custom token.\r\n     * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\r\n     *     service account key and containing the provided payload.\r\n     */\r\n    FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\r\n        var _this = this;\r\n        var errorMessage;\r\n        if (!validator.isNonEmptyString(uid)) {\r\n            errorMessage = '`uid` argument must be a non-empty string uid.';\r\n        }\r\n        else if (uid.length > 128) {\r\n            errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\r\n        }\r\n        else if (!this.isDeveloperClaimsValid_(developerClaims)) {\r\n            errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\r\n        }\r\n        if (errorMessage) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n        }\r\n        var claims = {};\r\n        if (typeof developerClaims !== 'undefined') {\r\n            for (var key in developerClaims) {\r\n                /* istanbul ignore else */\r\n                if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\r\n                    if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\r\n                        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\r\n                    }\r\n                    claims[key] = developerClaims[key];\r\n                }\r\n            }\r\n        }\r\n        return this.signer.getAccountId().then(function (account) {\r\n            var header = {\r\n                alg: _this.signer.algorithm,\r\n                typ: 'JWT',\r\n            };\r\n            var iat = Math.floor(Date.now() / 1000);\r\n            var body = {\r\n                aud: FIREBASE_AUDIENCE,\r\n                iat: iat,\r\n                exp: iat + ONE_HOUR_IN_SECONDS,\r\n                iss: account,\r\n                sub: account,\r\n                uid: uid,\r\n            };\r\n            if (_this.tenantId) {\r\n                // eslint-disable-next-line @typescript-eslint/camelcase\r\n                body.tenant_id = _this.tenantId;\r\n            }\r\n            if (Object.keys(claims).length > 0) {\r\n                body.claims = claims;\r\n            }\r\n            var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\r\n            var signPromise = _this.signer.sign(Buffer.from(token));\r\n            return Promise.all([token, signPromise]);\r\n        }).then(function (_a) {\r\n            var token = _a[0], signature = _a[1];\r\n            return token + \".\" + _this.encodeSegment(signature);\r\n        }).catch(function (err) {\r\n            throw handleCryptoSignerError(err);\r\n        });\r\n    };\r\n    FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\r\n        var buffer = (segment instanceof Buffer) ? segment : Buffer.from(JSON.stringify(segment));\r\n        return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\r\n    };\r\n    /**\r\n     * Returns whether or not the provided developer claims are valid.\r\n     *\r\n     * @param {object} [developerClaims] Optional developer claims to validate.\r\n     * @return {boolean} True if the provided claims are valid; otherwise, false.\r\n     */\r\n    FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\r\n        if (typeof developerClaims === 'undefined') {\r\n            return true;\r\n        }\r\n        return validator.isNonNullObject(developerClaims);\r\n    };\r\n    return FirebaseTokenGenerator;\r\n}());\r\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\r\n/**\r\n * Creates a new FirebaseAuthError by extracting the error code, message and other relevant\r\n * details from a CryptoSignerError.\r\n *\r\n * @param {Error} err The Error to convert into a FirebaseAuthError error\r\n * @return {FirebaseAuthError} A Firebase Auth error that can be returned to the user.\r\n */\r\nfunction handleCryptoSignerError(err) {\r\n    if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\r\n        return err;\r\n    }\r\n    if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\r\n        var httpError = err.cause;\r\n        var errorResponse = httpError.response.data;\r\n        if (validator.isNonNullObject(errorResponse) && errorResponse.error) {\r\n            var errorCode = errorResponse.error.status;\r\n            var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' +\r\n                'for more details on how to use and troubleshoot this feature.';\r\n            var errorMsg = errorResponse.error.message + \"; \" + description;\r\n            return error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, errorResponse);\r\n        }\r\n        return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + errorResponse + '. Additionally, an ' +\r\n            'internal error occurred while attempting to extract the ' +\r\n            'errorcode from the error.');\r\n    }\r\n    return new error_1.FirebaseAuthError(mapToAuthClientErrorCode(err.code), err.message);\r\n}\r\nexports.handleCryptoSignerError = handleCryptoSignerError;\r\nfunction mapToAuthClientErrorCode(code) {\r\n    switch (code) {\r\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\r\n            return error_1.AuthClientErrorCode.INVALID_CREDENTIAL;\r\n        case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\r\n            return error_1.AuthClientErrorCode.INVALID_ARGUMENT;\r\n        default:\r\n            return error_1.AuthClientErrorCode.INTERNAL_ERROR;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}