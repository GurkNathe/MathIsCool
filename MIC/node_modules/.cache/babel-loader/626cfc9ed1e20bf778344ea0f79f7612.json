{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\OneDrive\\\\Desktop\\\\Files\\\\Coding\\\\Websites\\\\MathIsCool\\\\MIC\\\\src\\\\components\\\\back\\\\TeamRegister.js\",\n    _s = $RefreshSig$();\n\nimport { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport React, { useState } from \"react\";\nimport Auto from \"../random/Auto.js\"; //Options for each dropdown. Probably use JSON for them\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet options = require(\"./options\");\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch'\n    }\n  }\n}));\n\nfunction TeamRegister() {\n  _s();\n\n  const history = useHistory();\n  const classes = useStyles();\n  const [choice, setChoice] = useState({\n    loc: null,\n    lev: null,\n    school: null,\n    team1: null,\n    team2: null,\n    coach: \"\",\n    error: false\n  });\n  let longest = 0;\n  var schoolData = {\n    value: null,\n    label: null,\n    div: null\n  };\n  var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\n                &entry.296234163=${choice.loc}\n                &entry.1262511676=${choice.lev}\n                &entry.2068664503=${schoolData.label}\n                &entry.962283225=${schoolData.value}\n                &entry.1420093772=${schoolData.div}\n                &entry.75608970=${choice.team1}\n                &entry.2041045214=${choice.team2}\n                &entry.2062002355=${choice.coach}`; //finding length of longest string in options and resize search box accordingly\n\n  for (var option in options) {\n    for (let i = 0; i < Object.keys(options[option]).length; i++) {\n      if (options[option][i].label.length > longest) longest = options[option][i].label.length;\n    }\n  } //don't know if there is a good way to do this, couldn't find anything\n\n\n  longest *= 10;\n\n  const onChange = (newValue, type) => {\n    switch (type) {\n      case \"location\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            loc: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            loc: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"level\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            lev: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            lev: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"school\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            school: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            school: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team1\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team1: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team1: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team2\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team2: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team2: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"coach\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            coach: newValue.target.value,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            coach: \"\",\n            error: false\n          }));\n        }\n\n        break;\n\n      default:\n        console.log(newValue, type);\n    }\n  }; //NEED TO ADD SUBMISSION TO STORAGE\n\n\n  const onSubmit = event => {\n    //Setting error if something is not filled out.\n    for (const item in choice) {\n      if (choice[item] === null || choice[item] === \"\") {\n        console.log(\"ERROR :\", item);\n        setChoice(prevState => ({ ...prevState,\n          error: true\n        }));\n        break;\n      }\n    }\n\n    setSchoolData();\n    console.log(choice);\n    console.log(url);\n\n    if (!choice.error) {// history.push({\n      //    pathname: `/team-register/confirm/`,\n      //    state:{\n      //       key: url\n      //    }\n      // });\n    }\n  };\n\n  const setSchoolData = () => {\n    //Getting all the data for that school\n    for (option in options.school) {\n      if (options.school[option].label === choice.school) {\n        schoolData = {\n          value: options.school[option].value,\n          label: options.school[option].label,\n          div: options.school[option].div\n        };\n        console.log(schoolData);\n        console.log(url);\n        break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderRadius: \"4px\",\n        margin: \"2%\",\n        boxShadow: \"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"1%\",\n          marginRight: \"1%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Rules for Individuals:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }, this), \" Any student may compete as an individual in their grade level or any higher grade; however, a student may compete as a team at one grade level only. This applies to both Championships and Masters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 51\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 56\n          }, this), \"Also note each team includes four students in addition to two alternates per school that can compete as individuals. So when registering n teams , you get to bring 4n+2 students along. These students don't need to be registered as individuals separately.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.root,\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(Auto, {\n            title: \"Competition Location\",\n            options: options.locations,\n            text: \"Select Competition Location\",\n            onChange: (event, newValue) => onChange(newValue, \"location\"),\n            width: longest,\n            value: choice.loc,\n            error: choice.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Auto, {\n            title: \"Competition Level\",\n            options: options.level,\n            text: \"Select Your Grade Level\",\n            onChange: (event, newValue) => onChange(newValue, \"level\"),\n            width: longest,\n            value: choice.lev,\n            error: choice.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Auto, {\n            title: \"School Registering\",\n            options: options.school,\n            text: \"Select Your School\",\n            onChange: (event, newValue) => onChange(newValue, \"school\"),\n            width: longest,\n            value: choice.school,\n            error: choice.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Auto, {\n            title: \"Number of 4, 5, 6, 7, or 9-10th Teams\",\n            options: options.numteam,\n            text: \"Select Number of Teams\",\n            onChange: (event, newValue) => onChange(newValue, \"team1\"),\n            width: longest,\n            value: choice.team1,\n            error: choice.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Auto, {\n            title: \"Number of 8 or 11-12th Teams\",\n            options: options.numteam,\n            text: \"Select Number of Teams\",\n            onChange: (event, newValue) => onChange(newValue, \"team2\"),\n            width: longest,\n            value: choice.team2,\n            error: choice.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Person Bringing Students to Event\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              error: choice.error && choice.coach === \"\",\n              helperText: choice.error && choice.coach === \"\" ? \"Please fill out to continue\" : null,\n              variant: \"outlined\",\n              margin: \"normal\",\n              required: true,\n              label: \"Coach\",\n              value: choice.coach,\n              onChange: event => onChange(event, \"coach\"),\n              style: {\n                width: longest\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 28\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3,\n              width: longest,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: onSubmit,\n                children: \"Continue\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 31\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 28\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"A school's division level is assigned based on past performance at Math is Cool contests. For more details and a current list of schools and assignments, see\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"../../../public/divisions.pdf\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"2018-19 Divisions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 25\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 16\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 13\n  }, this);\n}\n\n_s(TeamRegister, \"97hgqpgAh6jrvfP9Y/0A1CCMw+w=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = TeamRegister;\nexport default TeamRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"TeamRegister\");","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/src/components/back/TeamRegister.js"],"names":["TextField","Button","makeStyles","Grid","useHistory","React","useState","Auto","options","require","useStyles","theme","root","margin","spacing","width","TeamRegister","history","classes","choice","setChoice","loc","lev","school","team1","team2","coach","error","longest","schoolData","value","label","div","url","option","i","Object","keys","length","onChange","newValue","type","prevState","target","console","log","onSubmit","event","item","setSchoolData","display","flexDirection","borderRadius","boxShadow","marginLeft","marginRight","locations","level","numteam"],"mappings":"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","sourcesContent":["import { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport Auto from \"../random/Auto.js\";\r\n\r\n//Options for each dropdown. Probably use JSON for them\r\n\r\nlet options = require(\"./options\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n     '& .MuiTextField-root': {\r\n       margin: theme.spacing(1),\r\n       width: '25ch',\r\n     },\r\n   },\r\n }));\r\n\r\nfunction TeamRegister(){\r\n   const history = useHistory();\r\n   const classes = useStyles();\r\n   const [choice, setChoice] = useState({ loc: null, \r\n                                          lev: null, \r\n                                          school: null,\r\n                                          team1: null,\r\n                                          team2: null,\r\n                                          coach: \"\",\r\n                                          error: false,\r\n                                       });\r\n\r\n   let longest = 0;\r\n   var schoolData = {value: null, label: null, div: null}\r\n\r\n   var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\r\n                &entry.296234163=${choice.loc}\r\n                &entry.1262511676=${choice.lev}\r\n                &entry.2068664503=${schoolData.label}\r\n                &entry.962283225=${schoolData.value}\r\n                &entry.1420093772=${schoolData.div}\r\n                &entry.75608970=${choice.team1}\r\n                &entry.2041045214=${choice.team2}\r\n                &entry.2062002355=${choice.coach}`\r\n\r\n   //finding length of longest string in options and resize search box accordingly\r\n   for(var option in options){\r\n      for(let i = 0; i < Object.keys(options[option]).length; i++){\r\n         if(options[option][i].label.length > longest)\r\n            longest = options[option][i].label.length;\r\n      }\r\n   }\r\n\r\n   //don't know if there is a good way to do this, couldn't find anything\r\n   longest *= 10;\r\n\r\n   const onChange = (newValue, type) => {\r\n      switch (type) {\r\n         case \"location\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"level\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"school\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team1\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team2\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"coach\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: newValue.target.value,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: \"\",\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         default:\r\n            console.log(newValue, type)\r\n      }\r\n   };\r\n\r\n\r\n   //NEED TO ADD SUBMISSION TO STORAGE\r\n   const onSubmit = (event) => {\r\n      \r\n      //Setting error if something is not filled out.\r\n      for (const item in choice){\r\n         if(choice[item] === null || choice[item] === \"\"){\r\n            console.log(\"ERROR :\", item)\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               error: true,\r\n            }));\r\n            break;\r\n         }\r\n      }\r\n\r\n      setSchoolData();\r\n      console.log(choice)\r\n      console.log(url)\r\n      \r\n      if(!choice.error){\r\n         // history.push({\r\n         //    pathname: `/team-register/confirm/`,\r\n         //    state:{\r\n         //       key: url\r\n         //    }\r\n         // });\r\n      }\r\n   }\r\n\r\n   const setSchoolData = () => {\r\n      //Getting all the data for that school\r\n      for(option in options.school){\r\n         if(options.school[option].label === choice.school){\r\n            schoolData = {\r\n               value: options.school[option].value,\r\n               label: options.school[option].label,\r\n               div: options.school[option].div,\r\n            }\r\n            console.log(schoolData)\r\n            console.log(url)\r\n            break;\r\n         }\r\n      }\r\n   }\r\n\r\n   return(\r\n            <div style={{display: \"flex\", flexDirection:\"row\"}}>\r\n               <div style={{borderRadius: \"4px\", margin:\"2%\", boxShadow:\"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"}}>\r\n                  <div style={{marginLeft:\"1%\", marginRight:\"1%\",}}>\r\n                     <p>\r\n                        <b>Rules for Individuals:</b> Any student may compete as an individual \r\n                        in their grade level or any higher grade; however, a student may \r\n                        compete as a team at one grade level only. This applies to both \r\n                        Championships and Masters.<br/><br/>\r\n\r\n                        Also note each team includes four students in addition to \r\n                        two alternates per school that can compete as individuals. So \r\n                        when registering n teams , you get to bring 4n+2 students along. \r\n                        These students don't need to be registered as individuals separately.\r\n                     </p>\r\n                     <form className={classes.root} noValidate autoComplete=\"off\">\r\n\r\n                        <Auto\r\n                           title=\"Competition Location\"\r\n                           options={options.locations}\r\n                           text=\"Select Competition Location\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"location\")}\r\n                           width={longest}\r\n                           value={choice.loc}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Competition Level\"\r\n                           options={options.level}\r\n                           text=\"Select Your Grade Level\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"level\")}\r\n                           width={longest}\r\n                           value={choice.lev}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"School Registering\"\r\n                           options={options.school}\r\n                           text=\"Select Your School\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"school\")}\r\n                           width={longest}\r\n                           value={choice.school}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Number of 4, 5, 6, 7, or 9-10th Teams\"\r\n                           options={options.numteam}\r\n                           text=\"Select Number of Teams\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"team1\")}\r\n                           width={longest}\r\n                           value={choice.team1}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Number of 8 or 11-12th Teams\"\r\n                           options={options.numteam}\r\n                           text=\"Select Number of Teams\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"team2\")}\r\n                           width={longest}\r\n                           value={choice.team2}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <div style={{display:\"flex\"}}>\r\n                           <Grid item sm={3}>\r\n                              <p>Person Bringing Students to Event</p>\r\n                           </Grid>\r\n                           <TextField\r\n                              error={choice.error && choice.coach === \"\"}\r\n                              helperText={choice.error && choice.coach === \"\" ? \r\n                                             \"Please fill out to continue\" : \r\n                                             null\r\n                                          }\r\n                              variant=\"outlined\" \r\n                              margin=\"normal\" \r\n                              required\r\n                              label=\"Coach\"\r\n                              value={choice.coach}\r\n                              onChange={(event) => onChange(event, \"coach\")}\r\n                              style={{ width: longest }}\r\n                           >\r\n                           </TextField>\r\n                        </div>\r\n\r\n                        <Grid container>\r\n                           <Grid item sm={3}></Grid>\r\n                           <Grid item sm={3} width={longest}>\r\n                              <Button\r\n                                 fullWidth\r\n                                 variant=\"contained\"\r\n                                 color=\"primary\"\r\n                                 onClick={onSubmit}\r\n                              >\r\n                                 Continue\r\n                              </Button>\r\n                           </Grid>\r\n                        </Grid>\r\n\r\n                     </form>\r\n                     <p>\r\n                        A school's division level is assigned based on past performance at \r\n                        Math is Cool contests. For more details and a current list of \r\n                        schools and assignments, see&nbsp;\r\n                        <a href=\"../../../public/divisions.pdf\" target=\"_blank\" rel=\"noreferrer\">2018-19 Divisions</a>.\r\n                     </p>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default TeamRegister;"]},"metadata":{},"sourceType":"module"}