{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\OneDrive\\\\Desktop\\\\Files\\\\Coding\\\\Websites\\\\MathIsCool\\\\MIC\\\\src\\\\components\\\\back\\\\TeamRegister.js\",\n    _s = $RefreshSig$();\n\nimport { TextField, MenuItem, makeStyles, Grid } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React, { useState } from \"react\"; //Options for each dropdown. Probably use JSON for them\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet options = require(\"./options\");\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch'\n    }\n  }\n})); // <TextField\n// select\n// variant=\"outlined\"\n// label=\"Please Select Grade Level\"\n// value={choice.lev}\n// onChange={(event) => onChange(event, \"level\")}\n// >\n// {options.level.map((option) => (\n//    <MenuItem key={option.value} value={option.value}>\n//       {option.label}\n//    </MenuItem>\n// ))}\n// </TextField>\n\n{\n  /* <div style={{display:\"flex\"}}>\r\n    <Grid item sm={3}>\r\n       <p>Coach</p>\r\n    </Grid>\r\n    <TextField\r\n       variant=\"outlined\" \r\n       margin=\"normal\" \r\n       required\r\n       label=\"Coach\"\r\n       value={choice.coach}\r\n       onChange={(event) => onChange(event, \"coach\")}\r\n       style={{ width: longest }}\r\n    >\r\n  \n    </TextField>\r\n  </div> */\n} //json\n//value\n//onChange\n//text\n//width\n\nfunction Auto(props) {\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    options: props.options.map(option => option.label),\n    value: props.value,\n    onChange: props.onChange,\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: props.text,\n      variant: \"outlined\",\n      style: {\n        width: props.width\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Auto;\n\nfunction TeamRegister() {\n  _s();\n\n  const classes = useStyles();\n  const [choice, setChoice] = useState({\n    loc: \"\",\n    lev: \"\",\n    school: \"\",\n    coach: \"\"\n  });\n  let longest = 0; //finding length of longest string in options and resize search box accordingly\n\n  for (var option in options) {\n    for (let i = 0; i < Object.keys(options[option]).length; i++) {\n      if (options[option][i].label.length > longest) longest = options[option][i].label.length;\n    }\n  } //don't know if there is a good way to do this, couldn't find anything\n\n\n  longest *= 11;\n\n  const onChange = (newValue, type) => {\n    switch (type) {\n      case \"location\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            loc: newValue\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            loc: \"\"\n          }));\n        }\n\n        console.log(choice);\n        break;\n\n      case \"level\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            lev: newValue\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            lev: \"\"\n          }));\n        }\n\n        console.log(choice);\n        break;\n\n      case \"school\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            school: newValue\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            school: \"\"\n          }));\n        }\n\n        console.log(choice);\n        break;\n\n      case \"coach\":\n        setChoice(prevState => ({ ...prevState,\n          coach: newValue.target.value\n        }));\n        break;\n\n      default:\n        console.log(newValue, type);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        borderRadius: \"4px\",\n        margin: \"2%\",\n        boxShadow: \"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginLeft: \"1%\",\n          marginRight: \"1%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Rules for Individuals:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 19\n          }, this), \" Any student may compete as an individual in their grade level or any higher grade; however, a student may compete as a team at one grade level only. This applies to both Championships and Masters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 45\n          }, this), \"Also note each team includes four students in addition to two alternates per school that can compete as individuals. So when registering n teams , you get to bring 4n+2 students along. These students don't need to be registered as individuals separately.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.root,\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Competition Location\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              options: options.locations,\n              text: \"Select Competition Location\",\n              onChange: (event, newValue) => onChange(newValue, \"location\"),\n              width: longest,\n              value: choice.loc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Competition Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              options: options.level,\n              text: \"Select Your Grade Level\",\n              onChange: (event, newValue) => onChange(newValue, \"level\"),\n              width: longest,\n              value: choice.lev\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              sm: 3,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"School Registering\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              options: options.school,\n              text: \"Select Your School\",\n              onChange: (event, newValue) => onChange(newValue, \"school\"),\n              width: longest,\n              value: choice.school\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TeamRegister, \"rSoxZZ/KLnVvV7qRvYAhkXGqCaY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = TeamRegister;\nexport default TeamRegister;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Auto\");\n$RefreshReg$(_c2, \"TeamRegister\");","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/src/components/back/TeamRegister.js"],"names":["TextField","MenuItem","makeStyles","Grid","Autocomplete","React","useState","options","require","useStyles","theme","root","margin","spacing","width","Auto","props","map","option","label","value","onChange","params","text","TeamRegister","classes","choice","setChoice","loc","lev","school","coach","longest","i","Object","keys","length","newValue","type","prevState","console","log","target","display","flexDirection","borderRadius","boxShadow","marginLeft","marginRight","locations","event","level"],"mappings":"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","sourcesContent":["import { TextField, MenuItem, makeStyles, Grid } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useState } from \"react\";\r\n\r\n//Options for each dropdown. Probably use JSON for them\r\n\r\nlet options = require(\"./options\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n     '& .MuiTextField-root': {\r\n       margin: theme.spacing(1),\r\n       width: '25ch',\r\n     },\r\n   },\r\n }));\r\n\r\n// <TextField\r\n// select\r\n// variant=\"outlined\"\r\n// label=\"Please Select Grade Level\"\r\n// value={choice.lev}\r\n// onChange={(event) => onChange(event, \"level\")}\r\n// >\r\n// {options.level.map((option) => (\r\n//    <MenuItem key={option.value} value={option.value}>\r\n//       {option.label}\r\n//    </MenuItem>\r\n// ))}\r\n// </TextField>\r\n\r\n{/* <div style={{display:\"flex\"}}>\r\n   <Grid item sm={3}>\r\n      <p>Coach</p>\r\n   </Grid>\r\n   <TextField\r\n      variant=\"outlined\" \r\n      margin=\"normal\" \r\n      required\r\n      label=\"Coach\"\r\n      value={choice.coach}\r\n      onChange={(event) => onChange(event, \"coach\")}\r\n      style={{ width: longest }}\r\n   >\r\n\r\n   </TextField>\r\n</div> */}\r\n\r\n//json\r\n//value\r\n//onChange\r\n//text\r\n//width\r\nfunction Auto(props){\r\n   return(\r\n      <Autocomplete\r\n         options={props.options.map((option) => option.label)}\r\n         value={props.value}\r\n         onChange={props.onChange}\r\n         freeSolo\r\n         renderInput={(params) => \r\n                        <TextField \r\n                           {...params} \r\n                           label={props.text} \r\n                           variant=\"outlined\"\r\n                           style={{ width: props.width }}\r\n                        />\r\n                     }\r\n      />\r\n   );\r\n}\r\n\r\nfunction TeamRegister(){\r\n   const classes = useStyles();\r\n   const [choice, setChoice] = useState({loc: \"\", lev: \"\", school: \"\", coach: \"\"});\r\n\r\n   let longest = 0;\r\n\r\n   //finding length of longest string in options and resize search box accordingly\r\n   for(var option in options){\r\n      for(let i = 0; i < Object.keys(options[option]).length; i++){\r\n         if(options[option][i].label.length > longest)\r\n            longest = options[option][i].label.length;\r\n      }\r\n   }\r\n\r\n   //don't know if there is a good way to do this, couldn't find anything\r\n   longest *= 11;\r\n\r\n   const onChange = (newValue, type) => {\r\n      switch (type) {\r\n         case \"location\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: newValue,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: \"\",\r\n               }));\r\n            }\r\n            console.log(choice)\r\n            break;\r\n         case \"level\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: newValue,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: \"\",\r\n               }));\r\n            }\r\n            console.log(choice)\r\n            break;\r\n         case \"school\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: newValue,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: \"\",\r\n               }));\r\n            }\r\n            console.log(choice)\r\n            break;\r\n         case \"coach\":\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               coach: newValue.target.value,\r\n            }));\r\n            break;\r\n         default:\r\n            console.log(newValue, type)\r\n      }\r\n   };\r\n\r\n   return(\r\n      <div style={{display: \"flex\", flexDirection:\"row\"}}>\r\n         <div style={{borderRadius: \"4px\", margin:\"2%\", boxShadow:\"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"}}>\r\n            <div style={{marginLeft:\"1%\", marginRight:\"1%\"}}>\r\n               <p>\r\n                  <b>Rules for Individuals:</b> Any student may compete as an individual \r\n                  in their grade level or any higher grade; however, a student may \r\n                  compete as a team at one grade level only. This applies to both \r\n                  Championships and Masters.<br/>\r\n\r\n                  Also note each team includes four students in addition to \r\n                  two alternates per school that can compete as individuals. So \r\n                  when registering n teams , you get to bring 4n+2 students along. \r\n                  These students don't need to be registered as individuals separately.\r\n               </p>\r\n               <form className={classes.root} noValidate autoComplete=\"off\">\r\n                  <div style={{display:\"flex\"}}>\r\n                     <Grid item sm={3}>\r\n                        <p>Competition Location</p>\r\n                     </Grid>\r\n                     <Auto\r\n                        options={options.locations}\r\n                        text=\"Select Competition Location\"\r\n                        onChange={(event, newValue) => onChange(newValue, \"location\")}\r\n                        width={longest}\r\n                        value={choice.loc}\r\n                     />\r\n                     \r\n                  </div>\r\n                  <div style={{display:\"flex\"}}>\r\n                     <Grid item sm={3}>\r\n                        <p>Competition Level</p>\r\n                     </Grid>\r\n                     <Auto\r\n                        options={options.level}\r\n                        text=\"Select Your Grade Level\"\r\n                        onChange={(event, newValue) => onChange(newValue, \"level\")}\r\n                        width={longest}\r\n                        value={choice.lev}\r\n                     />\r\n                     \r\n                  </div>\r\n                  <div style={{display:\"flex\"}}>\r\n                     <Grid item sm={3}>\r\n                        <p>School Registering</p>\r\n                     </Grid>\r\n                     \r\n                     <Auto\r\n                        options={options.school}\r\n                        text=\"Select Your School\"\r\n                        onChange={(event, newValue) => onChange(newValue, \"school\")}\r\n                        width={longest}\r\n                        value={choice.school}\r\n                     />\r\n                  </div>\r\n                  \r\n               </form>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default TeamRegister;"]},"metadata":{},"sourceType":"module"}