{"ast":null,"code":"const {\n  JWKKeySupport,\n  JOSENotSupported\n} = require('../errors');\n\nconst {\n  KEY_MANAGEMENT_ENCRYPT,\n  KEY_MANAGEMENT_DECRYPT\n} = require('../help/consts');\n\nconst {\n  JWA,\n  JWK\n} = require('../registry'); // sign, verify\n\n\nrequire('./hmac')(JWA, JWK);\n\nrequire('./ecdsa')(JWA, JWK);\n\nrequire('./eddsa')(JWA, JWK);\n\nrequire('./rsassa_pss')(JWA, JWK);\n\nrequire('./rsassa')(JWA, JWK);\n\nrequire('./none')(JWA); // encrypt, decrypt\n\n\nrequire('./aes_cbc_hmac_sha2')(JWA, JWK);\n\nrequire('./aes_gcm')(JWA, JWK); // wrapKey, unwrapKey\n\n\nrequire('./rsaes')(JWA, JWK);\n\nrequire('./aes_kw')(JWA, JWK);\n\nrequire('./aes_gcm_kw')(JWA, JWK); // deriveKey\n\n\nrequire('./pbes2')(JWA, JWK);\n\nrequire('./ecdh/dir')(JWA, JWK);\n\nrequire('./ecdh/kw')(JWA, JWK);\n\nconst check = (key, op, alg) => {\n  const cache = `_${op}_${alg}`;\n  let label;\n  let keyOp;\n\n  if (op === 'keyManagementEncrypt') {\n    label = 'key management (encryption)';\n    keyOp = KEY_MANAGEMENT_ENCRYPT;\n  } else if (op === 'keyManagementDecrypt') {\n    label = 'key management (decryption)';\n    keyOp = KEY_MANAGEMENT_DECRYPT;\n  }\n\n  if (cache in key) {\n    if (key[cache]) {\n      return;\n    }\n\n    throw new JWKKeySupport(`the key does not support ${alg} ${label || op} algorithm`);\n  }\n\n  let value = true;\n\n  if (!JWA[op].has(alg)) {\n    throw new JOSENotSupported(`unsupported ${label || op} alg: ${alg}`);\n  } else if (!key.algorithms(keyOp).has(alg)) {\n    value = false;\n  }\n\n  Object.defineProperty(key, cache, {\n    value,\n    enumerable: false\n  });\n\n  if (!value) {\n    return check(key, op, alg);\n  }\n};\n\nmodule.exports = {\n  check,\n  sign: (alg, key, payload) => {\n    check(key, 'sign', alg);\n    return JWA.sign.get(alg)(key, payload);\n  },\n  verify: (alg, key, payload, signature) => {\n    check(key, 'verify', alg);\n    return JWA.verify.get(alg)(key, payload, signature);\n  },\n  keyManagementEncrypt: (alg, key, payload, opts) => {\n    check(key, 'keyManagementEncrypt', alg);\n    return JWA.keyManagementEncrypt.get(alg)(key, payload, opts);\n  },\n  keyManagementDecrypt: (alg, key, payload, opts) => {\n    check(key, 'keyManagementDecrypt', alg);\n    return JWA.keyManagementDecrypt.get(alg)(key, payload, opts);\n  },\n  encrypt: (alg, key, cleartext, opts) => {\n    check(key, 'encrypt', alg);\n    return JWA.encrypt.get(alg)(key, cleartext, opts);\n  },\n  decrypt: (alg, key, ciphertext, opts) => {\n    check(key, 'decrypt', alg);\n    return JWA.decrypt.get(alg)(key, ciphertext, opts);\n  }\n};","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/jose/lib/jwa/index.js"],"names":["JWKKeySupport","JOSENotSupported","require","KEY_MANAGEMENT_ENCRYPT","KEY_MANAGEMENT_DECRYPT","JWA","JWK","check","key","op","alg","cache","label","keyOp","value","has","algorithms","Object","defineProperty","enumerable","module","exports","sign","payload","get","verify","signature","keyManagementEncrypt","opts","keyManagementDecrypt","encrypt","cleartext","decrypt","ciphertext"],"mappings":"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","sourcesContent":["const { JWKKeySupport, JOSENotSupported } = require('../errors')\r\nconst { KEY_MANAGEMENT_ENCRYPT, KEY_MANAGEMENT_DECRYPT } = require('../help/consts')\r\n\r\nconst { JWA, JWK } = require('../registry')\r\n\r\n// sign, verify\r\nrequire('./hmac')(JWA, JWK)\r\nrequire('./ecdsa')(JWA, JWK)\r\nrequire('./eddsa')(JWA, JWK)\r\nrequire('./rsassa_pss')(JWA, JWK)\r\nrequire('./rsassa')(JWA, JWK)\r\nrequire('./none')(JWA)\r\n\r\n// encrypt, decrypt\r\nrequire('./aes_cbc_hmac_sha2')(JWA, JWK)\r\nrequire('./aes_gcm')(JWA, JWK)\r\n\r\n// wrapKey, unwrapKey\r\nrequire('./rsaes')(JWA, JWK)\r\nrequire('./aes_kw')(JWA, JWK)\r\nrequire('./aes_gcm_kw')(JWA, JWK)\r\n\r\n// deriveKey\r\nrequire('./pbes2')(JWA, JWK)\r\nrequire('./ecdh/dir')(JWA, JWK)\r\nrequire('./ecdh/kw')(JWA, JWK)\r\n\r\nconst check = (key, op, alg) => {\r\n  const cache = `_${op}_${alg}`\r\n\r\n  let label\r\n  let keyOp\r\n  if (op === 'keyManagementEncrypt') {\r\n    label = 'key management (encryption)'\r\n    keyOp = KEY_MANAGEMENT_ENCRYPT\r\n  } else if (op === 'keyManagementDecrypt') {\r\n    label = 'key management (decryption)'\r\n    keyOp = KEY_MANAGEMENT_DECRYPT\r\n  }\r\n\r\n  if (cache in key) {\r\n    if (key[cache]) {\r\n      return\r\n    }\r\n    throw new JWKKeySupport(`the key does not support ${alg} ${label || op} algorithm`)\r\n  }\r\n\r\n  let value = true\r\n  if (!JWA[op].has(alg)) {\r\n    throw new JOSENotSupported(`unsupported ${label || op} alg: ${alg}`)\r\n  } else if (!key.algorithms(keyOp).has(alg)) {\r\n    value = false\r\n  }\r\n\r\n  Object.defineProperty(key, cache, { value, enumerable: false })\r\n\r\n  if (!value) {\r\n    return check(key, op, alg)\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  check,\r\n  sign: (alg, key, payload) => {\r\n    check(key, 'sign', alg)\r\n    return JWA.sign.get(alg)(key, payload)\r\n  },\r\n  verify: (alg, key, payload, signature) => {\r\n    check(key, 'verify', alg)\r\n    return JWA.verify.get(alg)(key, payload, signature)\r\n  },\r\n  keyManagementEncrypt: (alg, key, payload, opts) => {\r\n    check(key, 'keyManagementEncrypt', alg)\r\n    return JWA.keyManagementEncrypt.get(alg)(key, payload, opts)\r\n  },\r\n  keyManagementDecrypt: (alg, key, payload, opts) => {\r\n    check(key, 'keyManagementDecrypt', alg)\r\n    return JWA.keyManagementDecrypt.get(alg)(key, payload, opts)\r\n  },\r\n  encrypt: (alg, key, cleartext, opts) => {\r\n    check(key, 'encrypt', alg)\r\n    return JWA.encrypt.get(alg)(key, cleartext, opts)\r\n  },\r\n  decrypt: (alg, key, ciphertext, opts) => {\r\n    check(key, 'decrypt', alg)\r\n    return JWA.decrypt.get(alg)(key, ciphertext, opts)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}