{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Model = exports.MachineLearning = void 0;\n\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n\nvar utils = require(\"../utils\");\n/**\r\n * The Firebase Machine Learning class\r\n */\n\n\nvar MachineLearning =\n/** @class */\nfunction () {\n  /**\r\n   * @param {FirebaseApp} app The app for this ML service.\r\n   * @constructor\r\n   */\n  function MachineLearning(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'machine-learning/invalid-argument',\n        message: 'First argument passed to admin.machineLearning() must be a ' + 'valid Firebase app instance.'\n      });\n    }\n\n    this.appInternal = app;\n    this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n  }\n\n  Object.defineProperty(MachineLearning.prototype, \"app\", {\n    /**\r\n     * Returns the app associated with this ML instance.\r\n     *\r\n     * @return {FirebaseApp} The app associated with this ML instance.\r\n     */\n    get: function () {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a model in Firebase ML.\r\n   *\r\n   * @param {ModelOptions} model The model to create.\r\n   *\r\n   * @return {Promise<Model>} A Promise fulfilled with the created model.\r\n   */\n\n  MachineLearning.prototype.createModel = function (model) {\n    var _this = this;\n\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.createModel(modelContent);\n    }).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\r\n   * Updates a model in Firebase ML.\r\n   *\r\n   * @param {string} modelId The id of the model to update.\r\n   * @param {ModelOptions} model The model fields to update.\r\n   *\r\n   * @return {Promise<Model>} A Promise fulfilled with the updated model.\r\n   */\n\n\n  MachineLearning.prototype.updateModel = function (modelId, model) {\n    var _this = this;\n\n    var updateMask = utils.generateUpdateMask(model);\n    return this.signUrlIfPresent(model).then(function (modelContent) {\n      return _this.client.updateModel(modelId, modelContent, updateMask);\n    }).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\r\n   * Publishes a model in Firebase ML.\r\n   *\r\n   * @param {string} modelId The id of the model to publish.\r\n   *\r\n   * @return {Promise<Model>} A Promise fulfilled with the published model.\r\n   */\n\n\n  MachineLearning.prototype.publishModel = function (modelId) {\n    return this.setPublishStatus(modelId, true);\n  };\n  /**\r\n   * Unpublishes a model in Firebase ML.\r\n   *\r\n   * @param {string} modelId The id of the model to unpublish.\r\n   *\r\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\r\n   */\n\n\n  MachineLearning.prototype.unpublishModel = function (modelId) {\n    return this.setPublishStatus(modelId, false);\n  };\n  /**\r\n   * Gets a model from Firebase ML.\r\n   *\r\n   * @param {string} modelId The id of the model to get.\r\n   *\r\n   * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\r\n   */\n\n\n  MachineLearning.prototype.getModel = function (modelId) {\n    var _this = this;\n\n    return this.client.getModel(modelId).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n  /**\r\n   * Lists models from Firebase ML.\r\n   *\r\n   * @param {ListModelsOptions} options The listing options.\r\n   *\r\n   * @return {Promise<{models: Model[], pageToken?: string}>} A promise that\r\n   *     resolves with the current (filtered) list of models and the next page\r\n   *     token. For the last page, an empty list of models and no page token are\r\n   *     returned.\r\n   */\n\n\n  MachineLearning.prototype.listModels = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.client.listModels(options).then(function (resp) {\n      if (!validator.isNonNullObject(resp)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\n      }\n\n      var models = [];\n\n      if (resp.models) {\n        models = resp.models.map(function (rs) {\n          return new Model(rs, _this.client);\n        });\n      }\n\n      var result = {\n        models: models\n      };\n\n      if (resp.nextPageToken) {\n        result.pageToken = resp.nextPageToken;\n      }\n\n      return result;\n    });\n  };\n  /**\r\n   * Deletes a model from Firebase ML.\r\n   *\r\n   * @param {string} modelId The id of the model to delete.\r\n   */\n\n\n  MachineLearning.prototype.deleteModel = function (modelId) {\n    return this.client.deleteModel(modelId);\n  };\n\n  MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\n    var _this = this;\n\n    var updateMask = ['state.published'];\n    var options = {\n      state: {\n        published: publish\n      }\n    };\n    return this.client.updateModel(modelId, options, updateMask).then(function (operation) {\n      return _this.client.handleOperation(operation);\n    }).then(function (modelResponse) {\n      return new Model(modelResponse, _this.client);\n    });\n  };\n\n  MachineLearning.prototype.signUrlIfPresent = function (options) {\n    var modelOptions = deep_copy_1.deepCopy(options);\n\n    if (machine_learning_api_client_1.isGcsTfliteModelOptions(modelOptions)) {\n      return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri).then(function (uri) {\n        modelOptions.tfliteModel.gcsTfliteUri = uri;\n        return modelOptions;\n      }).catch(function (err) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\n      });\n    }\n\n    return Promise.resolve(modelOptions);\n  };\n\n  MachineLearning.prototype.signUrl = function (unsignedUrl) {\n    var MINUTES_IN_MILLIS = 60 * 1000;\n    var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n    var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n    var matches = gcsRegex.exec(unsignedUrl);\n\n    if (!matches) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\n    }\n\n    var bucketName = matches[1];\n    var blobName = matches[2];\n    var bucket = this.appInternal.storage().bucket(bucketName);\n    var blob = bucket.file(blobName);\n    return blob.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + URL_VALID_DURATION\n    }).then(function (signUrl) {\n      return signUrl[0];\n    });\n  };\n\n  return MachineLearning;\n}();\n\nexports.MachineLearning = MachineLearning;\n/**\r\n * A Firebase ML Model output object.\r\n */\n\nvar Model =\n/** @class */\nfunction () {\n  function Model(model, client) {\n    this.model = Model.validateAndClone(model);\n    this.client = client;\n  }\n\n  Object.defineProperty(Model.prototype, \"modelId\", {\n    get: function () {\n      return extractModelId(this.model.name);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"displayName\", {\n    get: function () {\n      return this.model.displayName;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"tags\", {\n    get: function () {\n      return this.model.tags || [];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"createTime\", {\n    get: function () {\n      return new Date(this.model.createTime).toUTCString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"updateTime\", {\n    get: function () {\n      return new Date(this.model.updateTime).toUTCString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"validationError\", {\n    get: function () {\n      var _a, _b;\n\n      return (_b = (_a = this.model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"published\", {\n    get: function () {\n      var _a;\n\n      return ((_a = this.model.state) === null || _a === void 0 ? void 0 : _a.published) || false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"etag\", {\n    get: function () {\n      return this.model.etag;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"modelHash\", {\n    get: function () {\n      return this.model.modelHash;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"tfliteModel\", {\n    get: function () {\n      // Make a copy so people can't directly modify the private this.model object.\n      return deep_copy_1.deepCopy(this.model.tfliteModel);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"locked\", {\n    /**\r\n     * Locked indicates if there are active long running operations on the model.\r\n     * Models may not be modified when they are locked.\r\n     */\n    get: function () {\n      var _a, _b;\n\n      return ((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Model.prototype.toJSON = function () {\n    // We can't just return this.model because it has extra fields and\n    // different formats etc. So we build the expected model object.\n    var jsonModel = {\n      modelId: this.modelId,\n      displayName: this.displayName,\n      tags: this.tags,\n      createTime: this.createTime,\n      updateTime: this.updateTime,\n      published: this.published,\n      etag: this.etag,\n      locked: this.locked\n    }; // Also add possibly undefined fields if they exist.\n\n    if (this.validationError) {\n      jsonModel['validationError'] = this.validationError;\n    }\n\n    if (this.modelHash) {\n      jsonModel['modelHash'] = this.modelHash;\n    }\n\n    if (this.tfliteModel) {\n      jsonModel['tfliteModel'] = this.tfliteModel;\n    }\n\n    return jsonModel;\n  };\n  /**\r\n   * Wait for the active operations on the model to complete.\r\n   * @param maxTimeMillis The number of milliseconds to wait for the model to be unlocked. If unspecified,\r\n   *     a default will be used.\r\n   */\n\n\n  Model.prototype.waitForUnlocked = function (maxTimeMillis) {\n    var _this = this;\n\n    var _a, _b;\n\n    if (((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\n      // The client will always be defined on Models that have activeOperations\n      // because models with active operations came back from the server and\n      // were constructed with a non-empty client.\n      return this.client.handleOperation(this.model.activeOperations[0], {\n        wait: true,\n        maxTimeMillis: maxTimeMillis\n      }).then(function (modelResponse) {\n        _this.model = Model.validateAndClone(modelResponse);\n      });\n    }\n\n    return Promise.resolve();\n  };\n\n  Model.validateAndClone = function (model) {\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.name) || !validator.isNonEmptyString(model.createTime) || !validator.isNonEmptyString(model.updateTime) || !validator.isNonEmptyString(model.displayName) || !validator.isNonEmptyString(model.etag)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\n    }\n\n    var tmpModel = deep_copy_1.deepCopy(model); // If tflite Model is specified, it must have a source consisting of\n    // oneof {gcsTfliteUri, automlModel}\n\n    if (model.tfliteModel && !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) && !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\n      // If we have some other source, ignore the whole tfliteModel.\n      delete tmpModel.tfliteModel;\n    } // Remove '@type' field. We don't need it.\n\n\n    if (tmpModel['@type']) {\n      delete tmpModel['@type'];\n    }\n\n    return tmpModel;\n  };\n\n  return Model;\n}();\n\nexports.Model = Model;\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/machine-learning/machine-learning.js"],"names":["Object","defineProperty","exports","value","Model","MachineLearning","machine_learning_api_client_1","require","error_1","validator","machine_learning_utils_1","deep_copy_1","utils","app","isNonNullObject","FirebaseError","code","message","appInternal","client","MachineLearningApiClient","prototype","get","enumerable","configurable","createModel","model","_this","signUrlIfPresent","then","modelContent","operation","handleOperation","modelResponse","updateModel","modelId","updateMask","generateUpdateMask","publishModel","setPublishStatus","unpublishModel","getModel","listModels","options","resp","FirebaseMachineLearningError","JSON","stringify","models","map","rs","result","nextPageToken","pageToken","deleteModel","publish","state","published","modelOptions","deepCopy","isGcsTfliteModelOptions","signUrl","tfliteModel","gcsTfliteUri","uri","catch","err","Promise","resolve","unsignedUrl","MINUTES_IN_MILLIS","URL_VALID_DURATION","gcsRegex","matches","exec","bucketName","blobName","bucket","storage","blob","file","getSignedUrl","action","expires","Date","now","validateAndClone","extractModelId","name","displayName","tags","createTime","toUTCString","updateTime","_a","_b","validationError","etag","modelHash","activeOperations","length","toJSON","jsonModel","locked","waitForUnlocked","maxTimeMillis","wait","isNonEmptyString","tmpModel","automlModel","resourceName","split","pop"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2020 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Model = exports.MachineLearning = void 0;\r\nvar machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\r\nvar error_1 = require(\"../utils/error\");\r\nvar validator = require(\"../utils/validator\");\r\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\r\nvar deep_copy_1 = require(\"../utils/deep-copy\");\r\nvar utils = require(\"../utils\");\r\n/**\r\n * The Firebase Machine Learning class\r\n */\r\nvar MachineLearning = /** @class */ (function () {\r\n    /**\r\n     * @param {FirebaseApp} app The app for this ML service.\r\n     * @constructor\r\n     */\r\n    function MachineLearning(app) {\r\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\r\n            throw new error_1.FirebaseError({\r\n                code: 'machine-learning/invalid-argument',\r\n                message: 'First argument passed to admin.machineLearning() must be a ' +\r\n                    'valid Firebase app instance.',\r\n            });\r\n        }\r\n        this.appInternal = app;\r\n        this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\r\n    }\r\n    Object.defineProperty(MachineLearning.prototype, \"app\", {\r\n        /**\r\n         * Returns the app associated with this ML instance.\r\n         *\r\n         * @return {FirebaseApp} The app associated with this ML instance.\r\n         */\r\n        get: function () {\r\n            return this.appInternal;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Creates a model in Firebase ML.\r\n     *\r\n     * @param {ModelOptions} model The model to create.\r\n     *\r\n     * @return {Promise<Model>} A Promise fulfilled with the created model.\r\n     */\r\n    MachineLearning.prototype.createModel = function (model) {\r\n        var _this = this;\r\n        return this.signUrlIfPresent(model)\r\n            .then(function (modelContent) { return _this.client.createModel(modelContent); })\r\n            .then(function (operation) { return _this.client.handleOperation(operation); })\r\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\r\n    };\r\n    /**\r\n     * Updates a model in Firebase ML.\r\n     *\r\n     * @param {string} modelId The id of the model to update.\r\n     * @param {ModelOptions} model The model fields to update.\r\n     *\r\n     * @return {Promise<Model>} A Promise fulfilled with the updated model.\r\n     */\r\n    MachineLearning.prototype.updateModel = function (modelId, model) {\r\n        var _this = this;\r\n        var updateMask = utils.generateUpdateMask(model);\r\n        return this.signUrlIfPresent(model)\r\n            .then(function (modelContent) { return _this.client.updateModel(modelId, modelContent, updateMask); })\r\n            .then(function (operation) { return _this.client.handleOperation(operation); })\r\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\r\n    };\r\n    /**\r\n     * Publishes a model in Firebase ML.\r\n     *\r\n     * @param {string} modelId The id of the model to publish.\r\n     *\r\n     * @return {Promise<Model>} A Promise fulfilled with the published model.\r\n     */\r\n    MachineLearning.prototype.publishModel = function (modelId) {\r\n        return this.setPublishStatus(modelId, true);\r\n    };\r\n    /**\r\n     * Unpublishes a model in Firebase ML.\r\n     *\r\n     * @param {string} modelId The id of the model to unpublish.\r\n     *\r\n     * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\r\n     */\r\n    MachineLearning.prototype.unpublishModel = function (modelId) {\r\n        return this.setPublishStatus(modelId, false);\r\n    };\r\n    /**\r\n     * Gets a model from Firebase ML.\r\n     *\r\n     * @param {string} modelId The id of the model to get.\r\n     *\r\n     * @return {Promise<Model>} A Promise fulfilled with the unpublished model.\r\n     */\r\n    MachineLearning.prototype.getModel = function (modelId) {\r\n        var _this = this;\r\n        return this.client.getModel(modelId)\r\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\r\n    };\r\n    /**\r\n     * Lists models from Firebase ML.\r\n     *\r\n     * @param {ListModelsOptions} options The listing options.\r\n     *\r\n     * @return {Promise<{models: Model[], pageToken?: string}>} A promise that\r\n     *     resolves with the current (filtered) list of models and the next page\r\n     *     token. For the last page, an empty list of models and no page token are\r\n     *     returned.\r\n     */\r\n    MachineLearning.prototype.listModels = function (options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        return this.client.listModels(options)\r\n            .then(function (resp) {\r\n            if (!validator.isNonNullObject(resp)) {\r\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid ListModels response: \" + JSON.stringify(resp));\r\n            }\r\n            var models = [];\r\n            if (resp.models) {\r\n                models = resp.models.map(function (rs) { return new Model(rs, _this.client); });\r\n            }\r\n            var result = { models: models };\r\n            if (resp.nextPageToken) {\r\n                result.pageToken = resp.nextPageToken;\r\n            }\r\n            return result;\r\n        });\r\n    };\r\n    /**\r\n     * Deletes a model from Firebase ML.\r\n     *\r\n     * @param {string} modelId The id of the model to delete.\r\n     */\r\n    MachineLearning.prototype.deleteModel = function (modelId) {\r\n        return this.client.deleteModel(modelId);\r\n    };\r\n    MachineLearning.prototype.setPublishStatus = function (modelId, publish) {\r\n        var _this = this;\r\n        var updateMask = ['state.published'];\r\n        var options = { state: { published: publish } };\r\n        return this.client.updateModel(modelId, options, updateMask)\r\n            .then(function (operation) { return _this.client.handleOperation(operation); })\r\n            .then(function (modelResponse) { return new Model(modelResponse, _this.client); });\r\n    };\r\n    MachineLearning.prototype.signUrlIfPresent = function (options) {\r\n        var modelOptions = deep_copy_1.deepCopy(options);\r\n        if (machine_learning_api_client_1.isGcsTfliteModelOptions(modelOptions)) {\r\n            return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri)\r\n                .then(function (uri) {\r\n                modelOptions.tfliteModel.gcsTfliteUri = uri;\r\n                return modelOptions;\r\n            })\r\n                .catch(function (err) {\r\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', \"Error during signing upload url: \" + err.message);\r\n            });\r\n        }\r\n        return Promise.resolve(modelOptions);\r\n    };\r\n    MachineLearning.prototype.signUrl = function (unsignedUrl) {\r\n        var MINUTES_IN_MILLIS = 60 * 1000;\r\n        var URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\r\n        var gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\r\n        var matches = gcsRegex.exec(unsignedUrl);\r\n        if (!matches) {\r\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', \"Invalid unsigned url: \" + unsignedUrl);\r\n        }\r\n        var bucketName = matches[1];\r\n        var blobName = matches[2];\r\n        var bucket = this.appInternal.storage().bucket(bucketName);\r\n        var blob = bucket.file(blobName);\r\n        return blob.getSignedUrl({\r\n            action: 'read',\r\n            expires: Date.now() + URL_VALID_DURATION,\r\n        }).then(function (signUrl) { return signUrl[0]; });\r\n    };\r\n    return MachineLearning;\r\n}());\r\nexports.MachineLearning = MachineLearning;\r\n/**\r\n * A Firebase ML Model output object.\r\n */\r\nvar Model = /** @class */ (function () {\r\n    function Model(model, client) {\r\n        this.model = Model.validateAndClone(model);\r\n        this.client = client;\r\n    }\r\n    Object.defineProperty(Model.prototype, \"modelId\", {\r\n        get: function () {\r\n            return extractModelId(this.model.name);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"displayName\", {\r\n        get: function () {\r\n            return this.model.displayName;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"tags\", {\r\n        get: function () {\r\n            return this.model.tags || [];\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"createTime\", {\r\n        get: function () {\r\n            return new Date(this.model.createTime).toUTCString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"updateTime\", {\r\n        get: function () {\r\n            return new Date(this.model.updateTime).toUTCString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"validationError\", {\r\n        get: function () {\r\n            var _a, _b;\r\n            return (_b = (_a = this.model.state) === null || _a === void 0 ? void 0 : _a.validationError) === null || _b === void 0 ? void 0 : _b.message;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"published\", {\r\n        get: function () {\r\n            var _a;\r\n            return ((_a = this.model.state) === null || _a === void 0 ? void 0 : _a.published) || false;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"etag\", {\r\n        get: function () {\r\n            return this.model.etag;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"modelHash\", {\r\n        get: function () {\r\n            return this.model.modelHash;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"tfliteModel\", {\r\n        get: function () {\r\n            // Make a copy so people can't directly modify the private this.model object.\r\n            return deep_copy_1.deepCopy(this.model.tfliteModel);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Model.prototype, \"locked\", {\r\n        /**\r\n         * Locked indicates if there are active long running operations on the model.\r\n         * Models may not be modified when they are locked.\r\n         */\r\n        get: function () {\r\n            var _a, _b;\r\n            return ((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Model.prototype.toJSON = function () {\r\n        // We can't just return this.model because it has extra fields and\r\n        // different formats etc. So we build the expected model object.\r\n        var jsonModel = {\r\n            modelId: this.modelId,\r\n            displayName: this.displayName,\r\n            tags: this.tags,\r\n            createTime: this.createTime,\r\n            updateTime: this.updateTime,\r\n            published: this.published,\r\n            etag: this.etag,\r\n            locked: this.locked,\r\n        };\r\n        // Also add possibly undefined fields if they exist.\r\n        if (this.validationError) {\r\n            jsonModel['validationError'] = this.validationError;\r\n        }\r\n        if (this.modelHash) {\r\n            jsonModel['modelHash'] = this.modelHash;\r\n        }\r\n        if (this.tfliteModel) {\r\n            jsonModel['tfliteModel'] = this.tfliteModel;\r\n        }\r\n        return jsonModel;\r\n    };\r\n    /**\r\n     * Wait for the active operations on the model to complete.\r\n     * @param maxTimeMillis The number of milliseconds to wait for the model to be unlocked. If unspecified,\r\n     *     a default will be used.\r\n     */\r\n    Model.prototype.waitForUnlocked = function (maxTimeMillis) {\r\n        var _this = this;\r\n        var _a, _b;\r\n        if (((_b = (_a = this.model.activeOperations) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0) {\r\n            // The client will always be defined on Models that have activeOperations\r\n            // because models with active operations came back from the server and\r\n            // were constructed with a non-empty client.\r\n            return this.client.handleOperation(this.model.activeOperations[0], { wait: true, maxTimeMillis: maxTimeMillis })\r\n                .then(function (modelResponse) {\r\n                _this.model = Model.validateAndClone(modelResponse);\r\n            });\r\n        }\r\n        return Promise.resolve();\r\n    };\r\n    Model.validateAndClone = function (model) {\r\n        if (!validator.isNonNullObject(model) ||\r\n            !validator.isNonEmptyString(model.name) ||\r\n            !validator.isNonEmptyString(model.createTime) ||\r\n            !validator.isNonEmptyString(model.updateTime) ||\r\n            !validator.isNonEmptyString(model.displayName) ||\r\n            !validator.isNonEmptyString(model.etag)) {\r\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Invalid Model response: \" + JSON.stringify(model));\r\n        }\r\n        var tmpModel = deep_copy_1.deepCopy(model);\r\n        // If tflite Model is specified, it must have a source consisting of\r\n        // oneof {gcsTfliteUri, automlModel}\r\n        if (model.tfliteModel &&\r\n            !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) &&\r\n            !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\r\n            // If we have some other source, ignore the whole tfliteModel.\r\n            delete tmpModel.tfliteModel;\r\n        }\r\n        // Remove '@type' field. We don't need it.\r\n        if (tmpModel['@type']) {\r\n            delete tmpModel['@type'];\r\n        }\r\n        return tmpModel;\r\n    };\r\n    return Model;\r\n}());\r\nexports.Model = Model;\r\nfunction extractModelId(resourceName) {\r\n    return resourceName.split('/').pop();\r\n}\r\n"]},"metadata":{},"sourceType":"script"}