{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\OneDrive\\\\Desktop\\\\Files\\\\Coding\\\\Websites\\\\MathIsCool\\\\MIC\\\\src\\\\components\\\\back\\\\TeamRegister.js\",\n    _s = $RefreshSig$();\n\nimport { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React, { useState } from \"react\"; //Options for each dropdown. Probably use JSON for them\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nlet options = require(\"./options\");\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch'\n    }\n  },\n  gform: {\n    width: \"100vh\",\n    height: \"1379\",\n    frameBorder: \"0\",\n    marginHeight: \"0\",\n    marginWidth: \"0\"\n  }\n})); //json\n//value\n//onChange\n//text\n//width\n\nfunction Auto(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 3,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      options: props.options.map(option => option.label),\n      value: props.value,\n      onChange: props.onChange,\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        error: props.error && (props.value === null || props.value === \"\"),\n        helperText: props.error && (props.value === null || props.value === \"\") ? \"Please fill out to continue\" : null,\n        label: props.text,\n        variant: \"outlined\",\n        required: true,\n        style: {\n          width: props.width\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Auto;\n\nfunction TeamRegister() {\n  _s();\n\n  const classes = useStyles();\n  const [choice, setChoice] = useState({\n    loc: null,\n    lev: null,\n    school: null,\n    schoolData: {\n      value: null,\n      label: null,\n      div: null\n    },\n    team1: null,\n    team2: null,\n    coach: \"\",\n    error: false\n  });\n  let longest = 0;\n  var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\n                &entry.296234163=${choice.loc}\n                &entry.1262511676=${choice.lev}\n                &entry.2068664503=${choice.schoolData.label}\n                &entry.962283225=${choice.schoolData.value}\n                &entry.1420093772=${choice.schoolData.div}\n                &entry.75608970=${choice.team1}\n                &entry.2041045214=${choice.team2}\n                &entry.2062002355=${choice.coach}`; //finding length of longest string in options and resize search box accordingly\n\n  for (var option in options) {\n    for (let i = 0; i < Object.keys(options[option]).length; i++) {\n      if (options[option][i].label.length > longest) longest = options[option][i].label.length;\n    }\n  } //don't know if there is a good way to do this, couldn't find anything\n\n\n  longest *= 10;\n\n  const onChange = (newValue, type) => {\n    switch (type) {\n      case \"location\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            loc: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            loc: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"level\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            lev: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            lev: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"school\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            school: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            school: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team1\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team1: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team1: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team2\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team2: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team2: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"coach\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            coach: newValue.target.value,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            coach: \"\",\n            error: false\n          }));\n        }\n\n        break;\n\n      default:\n        console.log(newValue, type);\n    }\n  }; //NEED TO ADD SUBMISSION TO STORAGE\n\n\n  const onSubmit = event => {\n    //Setting error if something is not filled out.\n    for (const item in choice) {\n      if (choice[item] === null || choice[item] === \"\") {\n        console.log(\"ERROR :\", item);\n        setChoice(prevState => ({ ...prevState,\n          error: true\n        }));\n        break;\n      }\n    } //Getting all the data for that school\n\n\n    for (option in options.school) {\n      if (options.school[option].label === choice.school) {\n        setChoice(prevState => ({ ...prevState,\n          schoolData: {\n            value: options.school[option].value,\n            label: options.school[option].label,\n            div: options.school[option].div\n          }\n        }));\n        console.log(options.school[option]);\n        break;\n      }\n    } //send data to sheets/database\n\n\n    console.log(event);\n    console.log(choice);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !choice.schoolData.value ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          borderRadius: \"4px\",\n          margin: \"2%\",\n          boxShadow: \"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"1%\",\n            marginRight: \"1%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"b\", {\n              children: \"Rules for Individuals:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 25\n            }, this), \" Any student may compete as an individual in their grade level or any higher grade; however, a student may compete as a team at one grade level only. This applies to both Championships and Masters.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 51\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 56\n            }, this), \"Also note each team includes four students in addition to two alternates per school that can compete as individuals. So when registering n teams , you get to bring 4n+2 students along. These students don't need to be registered as individuals separately.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.root,\n            noValidate: true,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Competition Location\",\n              options: options.locations,\n              text: \"Select Competition Location\",\n              onChange: (event, newValue) => onChange(newValue, \"location\"),\n              width: longest,\n              value: choice.loc,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Competition Level\",\n              options: options.level,\n              text: \"Select Your Grade Level\",\n              onChange: (event, newValue) => onChange(newValue, \"level\"),\n              width: longest,\n              value: choice.lev,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"School Registering\",\n              options: options.school,\n              text: \"Select Your School\",\n              onChange: (event, newValue) => onChange(newValue, \"school\"),\n              width: longest,\n              value: choice.school,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Number of 4, 5, 6, 7, or 9-10th Teams\",\n              options: options.numteam,\n              text: \"Select Number of Teams\",\n              onChange: (event, newValue) => onChange(newValue, \"team1\"),\n              width: longest,\n              value: choice.team1,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Number of 8 or 11-12th Teams\",\n              options: options.numteam,\n              text: \"Select Number of Teams\",\n              onChange: (event, newValue) => onChange(newValue, \"team2\"),\n              width: longest,\n              value: choice.team2,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Person Bringing Students to Event\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                error: choice.error && choice.coach === \"\",\n                helperText: choice.error && choice.coach === \"\" ? \"Please fill out to continue\" : null,\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                label: \"Coach\",\n                value: choice.coach,\n                onChange: event => onChange(event, \"coach\"),\n                style: {\n                  width: longest\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 324,\n                columnNumber: 28\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3,\n                width: longest,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  fullWidth: true,\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: onSubmit,\n                  children: \"Continue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 326,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 325,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 323,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 22\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"A school's division level is assigned based on past performance at Math is Cool contests. For more details and a current list of schools and assignments, see\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"../../../public.divisions.pdf\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: \"2018-19 Divisions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 25\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: url,\n      className: classes.gform,\n      children: \"Loading\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(TeamRegister, \"4BH8Wy1Ad6U0mVsZcAfumDoetFY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = TeamRegister;\nexport default TeamRegister;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Auto\");\n$RefreshReg$(_c2, \"TeamRegister\");","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/src/components/back/TeamRegister.js"],"names":["TextField","Button","makeStyles","Grid","Autocomplete","React","useState","options","require","useStyles","theme","root","margin","spacing","width","gform","height","frameBorder","marginHeight","marginWidth","Auto","props","display","title","map","option","label","value","onChange","params","error","text","TeamRegister","classes","choice","setChoice","loc","lev","school","schoolData","div","team1","team2","coach","longest","url","i","Object","keys","length","newValue","type","prevState","target","console","log","onSubmit","event","item","flexDirection","borderRadius","boxShadow","marginLeft","marginRight","locations","level","numteam"],"mappings":"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","sourcesContent":["import { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useState } from \"react\";\r\n\r\n//Options for each dropdown. Probably use JSON for them\r\n\r\nlet options = require(\"./options\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n     '& .MuiTextField-root': {\r\n       margin: theme.spacing(1),\r\n       width: '25ch',\r\n     },\r\n   },\r\n   gform: {\r\n      width:\"100vh\",\r\n      height:\"1379\",\r\n      frameBorder:\"0\",\r\n      marginHeight:\"0\",\r\n      marginWidth:\"0\",\r\n   }\r\n }));\r\n\r\n//json\r\n//value\r\n//onChange\r\n//text\r\n//width\r\nfunction Auto(props){\r\n   return(\r\n      <div style={{display:\"flex\"}}>\r\n         <Grid item sm={3}>\r\n            <p>{props.title}</p>\r\n         </Grid>\r\n         <Autocomplete\r\n            options={props.options.map((option) => option.label)}\r\n            value={props.value}\r\n            onChange={props.onChange}\r\n            freeSolo\r\n            renderInput={(params) => \r\n                           <TextField \r\n                              {...params} \r\n                              error={props.error && (props.value === null || props.value === \"\")}\r\n                              helperText={props.error && (props.value === null || props.value === \"\") ? \r\n                                             \"Please fill out to continue\" : \r\n                                             null\r\n                                          }\r\n                              label={props.text} \r\n                              variant=\"outlined\"\r\n                              required\r\n                              style={{ width: props.width }}\r\n                           />\r\n                        }\r\n         />\r\n      </div>\r\n   );\r\n}\r\n\r\nfunction TeamRegister(){\r\n   const classes = useStyles();\r\n   const [choice, setChoice] = useState({ loc: null, \r\n                                          lev: null, \r\n                                          school: null,\r\n                                          schoolData: {\r\n                                             value: null,\r\n                                             label: null,\r\n                                             div: null,\r\n                                           },\r\n                                          team1: null,\r\n                                          team2: null,\r\n                                          coach: \"\",\r\n                                          error: false,\r\n                                       });\r\n\r\n   let longest = 0;\r\n\r\n   var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\r\n                &entry.296234163=${choice.loc}\r\n                &entry.1262511676=${choice.lev}\r\n                &entry.2068664503=${choice.schoolData.label}\r\n                &entry.962283225=${choice.schoolData.value}\r\n                &entry.1420093772=${choice.schoolData.div}\r\n                &entry.75608970=${choice.team1}\r\n                &entry.2041045214=${choice.team2}\r\n                &entry.2062002355=${choice.coach}`\r\n\r\n   //finding length of longest string in options and resize search box accordingly\r\n   for(var option in options){\r\n      for(let i = 0; i < Object.keys(options[option]).length; i++){\r\n         if(options[option][i].label.length > longest)\r\n            longest = options[option][i].label.length;\r\n      }\r\n   }\r\n\r\n   //don't know if there is a good way to do this, couldn't find anything\r\n   longest *= 10;\r\n\r\n   const onChange = (newValue, type) => {\r\n      switch (type) {\r\n         case \"location\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"level\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"school\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team1\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team2\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"coach\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: newValue.target.value,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: \"\",\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         default:\r\n            console.log(newValue, type)\r\n      }\r\n   };\r\n\r\n\r\n   //NEED TO ADD SUBMISSION TO STORAGE\r\n   const onSubmit = (event) => {\r\n      \r\n      //Setting error if something is not filled out.\r\n      for (const item in choice){\r\n         if(choice[item] === null || choice[item] === \"\"){\r\n            console.log(\"ERROR :\", item)\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               error: true,\r\n            }));\r\n            break;\r\n         }\r\n      }\r\n\r\n      //Getting all the data for that school\r\n      for(option in options.school){\r\n         if(options.school[option].label === choice.school){\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               schoolData: {\r\n                value: options.school[option].value,\r\n                label: options.school[option].label,\r\n                div: options.school[option].div,\r\n               }\r\n            }));\r\n            console.log(options.school[option])\r\n            break;\r\n         }\r\n      }\r\n\r\n      //send data to sheets/database\r\n      console.log(event)\r\n      console.log(choice)\r\n   }\r\n\r\n   return(\r\n      <>\r\n         {!choice.schoolData.value ?\r\n            <div style={{display: \"flex\", flexDirection:\"row\"}}>\r\n               <div style={{borderRadius: \"4px\", margin:\"2%\", boxShadow:\"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"}}>\r\n                  <div style={{marginLeft:\"1%\", marginRight:\"1%\",}}>\r\n                     <p>\r\n                        <b>Rules for Individuals:</b> Any student may compete as an individual \r\n                        in their grade level or any higher grade; however, a student may \r\n                        compete as a team at one grade level only. This applies to both \r\n                        Championships and Masters.<br/><br/>\r\n\r\n                        Also note each team includes four students in addition to \r\n                        two alternates per school that can compete as individuals. So \r\n                        when registering n teams , you get to bring 4n+2 students along. \r\n                        These students don't need to be registered as individuals separately.\r\n                     </p>\r\n                     <form className={classes.root} noValidate autoComplete=\"off\">\r\n\r\n                        <Auto\r\n                           title=\"Competition Location\"\r\n                           options={options.locations}\r\n                           text=\"Select Competition Location\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"location\")}\r\n                           width={longest}\r\n                           value={choice.loc}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Competition Level\"\r\n                           options={options.level}\r\n                           text=\"Select Your Grade Level\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"level\")}\r\n                           width={longest}\r\n                           value={choice.lev}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"School Registering\"\r\n                           options={options.school}\r\n                           text=\"Select Your School\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"school\")}\r\n                           width={longest}\r\n                           value={choice.school}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Number of 4, 5, 6, 7, or 9-10th Teams\"\r\n                           options={options.numteam}\r\n                           text=\"Select Number of Teams\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"team1\")}\r\n                           width={longest}\r\n                           value={choice.team1}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                           title=\"Number of 8 or 11-12th Teams\"\r\n                           options={options.numteam}\r\n                           text=\"Select Number of Teams\"\r\n                           onChange={(event, newValue) => onChange(newValue, \"team2\")}\r\n                           width={longest}\r\n                           value={choice.team2}\r\n                           error={choice.error}\r\n                        />\r\n\r\n                        <div style={{display:\"flex\"}}>\r\n                           <Grid item sm={3}>\r\n                              <p>Person Bringing Students to Event</p>\r\n                           </Grid>\r\n                           <TextField\r\n                              error={choice.error && choice.coach === \"\"}\r\n                              helperText={choice.error && choice.coach === \"\" ? \r\n                                             \"Please fill out to continue\" : \r\n                                             null\r\n                                          }\r\n                              variant=\"outlined\" \r\n                              margin=\"normal\" \r\n                              required\r\n                              label=\"Coach\"\r\n                              value={choice.coach}\r\n                              onChange={(event) => onChange(event, \"coach\")}\r\n                              style={{ width: longest }}\r\n                           >\r\n                           </TextField>\r\n                        </div>\r\n\r\n                        <Grid container>\r\n                           <Grid item sm={3}></Grid>\r\n                           <Grid item sm={3} width={longest}>\r\n                              <Button\r\n                                 fullWidth\r\n                                 variant=\"contained\"\r\n                                 color=\"primary\"\r\n                                 onClick={onSubmit}\r\n                              >\r\n                                 Continue\r\n                              </Button>\r\n                           </Grid>\r\n                        </Grid>\r\n\r\n                     </form>\r\n                     <p>\r\n                        A school's division level is assigned based on past performance at \r\n                        Math is Cool contests. For more details and a current list of \r\n                        schools and assignments, see&nbsp;\r\n                        <a href=\"../../../public.divisions.pdf\" target=\"_blank\" rel=\"noreferrer\">2018-19 Divisions</a>.\r\n                     </p>\r\n                  </div>\r\n               </div>\r\n            </div> :\r\n            <iframe \r\n               src={url} \r\n               className={classes.gform}\r\n            >\r\n               Loading…\r\n            </iframe>\r\n         }\r\n      </>\r\n   );\r\n}\r\n\r\nexport default TeamRegister;"]},"metadata":{},"sourceType":"module"}