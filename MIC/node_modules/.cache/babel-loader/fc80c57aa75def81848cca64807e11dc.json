{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSessionCookieVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.ID_TOKEN_INFO = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar util = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar jwt_1 = require(\"../utils/jwt\"); // Audience to use for Firebase Auth Custom tokens\n\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit'; // URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\n\nvar CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com'; // URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\n\nvar SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\nvar EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\n/** User facing token information related to the Firebase ID token. */\n\nexports.ID_TOKEN_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n  verifyApiName: 'verifyIdToken()',\n  jwtName: 'Firebase ID token',\n  shortName: 'ID token',\n  expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED\n};\n/** User facing token information related to the Firebase session cookie. */\n\nexports.SESSION_COOKIE_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n  verifyApiName: 'verifySessionCookie()',\n  jwtName: 'Firebase session cookie',\n  shortName: 'session cookie',\n  expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED\n};\n/**\r\n * Class for verifying ID tokens and session cookies.\r\n */\n\nvar FirebaseTokenVerifier =\n/** @class */\nfunction () {\n  function FirebaseTokenVerifier(clientCertUrl, issuer, tokenInfo, app) {\n    this.issuer = issuer;\n    this.tokenInfo = tokenInfo;\n    this.app = app;\n\n    if (!validator.isURL(clientCertUrl)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\n    } else if (!validator.isURL(issuer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\n    } else if (!validator.isNonNullObject(tokenInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\n    } else if (!validator.isURL(tokenInfo.url)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\n    } else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\n    } else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\n    }\n\n    this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent); // For backward compatibility, the project ID is validated in the verification call.\n  }\n  /**\r\n   * Verifies the format and signature of a Firebase Auth JWT token.\r\n   *\r\n   * @param jwtToken The Firebase Auth JWT token to verify.\r\n   * @param isEmulator Whether to accept Auth Emulator tokens.\r\n   * @return A promise fulfilled with the decoded claims of the Firebase Auth ID token.\r\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyJWT = function (jwtToken, isEmulator) {\n    var _this = this;\n\n    if (isEmulator === void 0) {\n      isEmulator = false;\n    }\n\n    if (!validator.isString(jwtToken)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"First argument to \" + this.tokenInfo.verifyApiName + \" must be a \" + this.tokenInfo.jwtName + \" string.\");\n    }\n\n    return this.ensureProjectId().then(function (projectId) {\n      return _this.decodeAndVerify(jwtToken, projectId, isEmulator);\n    }).then(function (decoded) {\n      var decodedIdToken = decoded.payload;\n      decodedIdToken.uid = decodedIdToken.sub;\n      return decodedIdToken;\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.ensureProjectId = function () {\n    var _this = this;\n\n    return util.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' + (\"GOOGLE_CLOUD_PROJECT environment variable to call \" + _this.tokenInfo.verifyApiName + \".\"));\n      }\n\n      return Promise.resolve(projectId);\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.decodeAndVerify = function (token, projectId, isEmulator) {\n    var _this = this;\n\n    return this.safeDecode(token).then(function (decodedToken) {\n      _this.verifyContent(decodedToken, projectId, isEmulator);\n\n      return _this.verifySignature(token, isEmulator).then(function () {\n        return decodedToken;\n      });\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.safeDecode = function (jwtToken) {\n    var _this = this;\n\n    return jwt_1.decodeJwt(jwtToken).catch(function (err) {\n      if (err.code == jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\n        var verifyJwtTokenDocsMessage = \" See \" + _this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + _this.shortNameArticle + \" \" + _this.tokenInfo.shortName + \".\");\n        var errorMessage = \"Decoding \" + _this.tokenInfo.jwtName + \" failed. Make sure you passed \" + (\"the entire string JWT which represents \" + _this.shortNameArticle + \" \") + (_this.tokenInfo.shortName + \".\") + verifyJwtTokenDocsMessage;\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n      }\n\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\n    });\n  };\n  /**\r\n   * Verifies the content of a Firebase Auth JWT.\r\n   *\r\n   * @param fullDecodedToken The decoded JWT.\r\n   * @param projectId The Firebase Project Id.\r\n   * @param isEmulator Whether the token is an Emulator token.\r\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId, isEmulator) {\n    var header = fullDecodedToken && fullDecodedToken.header;\n    var payload = fullDecodedToken && fullDecodedToken.payload;\n    var projectIdMatchMessage = \" Make sure the \" + this.tokenInfo.shortName + \" comes from the same \" + 'Firebase project as the service account used to authenticate this SDK.';\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n    var errorMessage;\n\n    if (!isEmulator && typeof header.kid === 'undefined') {\n      var isCustomToken = payload.aud === FIREBASE_AUDIENCE;\n      var isLegacyCustomToken = header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d;\n\n      if (isCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a custom token.\");\n      } else if (isLegacyCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a legacy custom token.\");\n      } else {\n        errorMessage = 'Firebase ID token has no \"kid\" claim.';\n      }\n\n      errorMessage += verifyJwtTokenDocsMessage;\n    } else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect algorithm. Expected \\\"\" + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\n    } else if (payload.aud !== projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"aud\\\" (audience) claim. Expected \\\"\" + projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (payload.iss !== this.issuer + projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"iss\\\" (issuer) claim. Expected \" + (\"\\\"\" + this.issuer) + projectId + '\" but got \"' + payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = this.tokenInfo.jwtName + \" has no \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub === '') {\n      errorMessage = this.tokenInfo.jwtName + \" has an empty string \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub.length > 128) {\n      errorMessage = this.tokenInfo.jwtName + \" has \\\"sub\\\" (subject) claim longer than 128 characters.\" + verifyJwtTokenDocsMessage;\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n  };\n\n  FirebaseTokenVerifier.prototype.verifySignature = function (jwtToken, isEmulator) {\n    var _this = this;\n\n    var verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\n    return verifier.verify(jwtToken).catch(function (error) {\n      throw _this.mapJwtErrorToAuthError(error);\n    });\n  };\n  /**\r\n   * Maps JwtError to FirebaseAuthError\r\n   *\r\n   * @param error JwtError to be mapped.\r\n   * @returns FirebaseAuthError or Error instance.\r\n   */\n\n\n  FirebaseTokenVerifier.prototype.mapJwtErrorToAuthError = function (error) {\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      var errorMessage = this.tokenInfo.jwtName + \" has expired. Get a fresh \" + this.tokenInfo.shortName + (\" from your client app and try again (auth/\" + this.tokenInfo.expiredErrorCode.code + \").\") + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      var errorMessage = this.tokenInfo.jwtName + \" has invalid signature.\" + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      var errorMessage = this.tokenInfo.jwtName + \" has \\\"kid\\\" claim which does not \" + (\"correspond to a known public key. Most likely the \" + this.tokenInfo.shortName + \" \") + 'is expired, so get a fresh token from your client app and try again.';\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\n  };\n\n  return FirebaseTokenVerifier;\n}();\n\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\r\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\r\n *\r\n * @param app Firebase app instance.\r\n * @return FirebaseTokenVerifier\r\n */\n\nfunction createIdTokenVerifier(app) {\n  return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\n\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\r\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\r\n *\r\n * @param app Firebase app instance.\r\n * @return FirebaseTokenVerifier\r\n */\n\nfunction createSessionCookieVerifier(app) {\n  return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\n\nexports.createSessionCookieVerifier = createSessionCookieVerifier;","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/auth/token-verifier.js"],"names":["Object","defineProperty","exports","value","createSessionCookieVerifier","createIdTokenVerifier","FirebaseTokenVerifier","SESSION_COOKIE_INFO","ID_TOKEN_INFO","error_1","require","util","validator","jwt_1","FIREBASE_AUDIENCE","CLIENT_CERT_URL","SESSION_COOKIE_CERT_URL","EMULATOR_VERIFIER","EmulatorSignatureVerifier","url","verifyApiName","jwtName","shortName","expiredErrorCode","AuthClientErrorCode","ID_TOKEN_EXPIRED","SESSION_COOKIE_EXPIRED","clientCertUrl","issuer","tokenInfo","app","isURL","FirebaseAuthError","INVALID_ARGUMENT","isNonNullObject","isNonEmptyString","shortNameArticle","charAt","match","signatureVerifier","PublicKeySignatureVerifier","withCertificateUrl","options","httpAgent","prototype","verifyJWT","jwtToken","isEmulator","_this","isString","ensureProjectId","then","projectId","decodeAndVerify","decoded","decodedIdToken","payload","uid","sub","findProjectId","INVALID_CREDENTIAL","Promise","resolve","token","safeDecode","decodedToken","verifyContent","verifySignature","decodeJwt","catch","err","code","JwtErrorCode","verifyJwtTokenDocsMessage","errorMessage","INTERNAL_ERROR","message","fullDecodedToken","header","projectIdMatchMessage","kid","isCustomToken","aud","isLegacyCustomToken","alg","v","d","ALGORITHM_RS256","iss","length","verifier","verify","error","mapJwtErrorToAuthError","TOKEN_EXPIRED","INVALID_SIGNATURE","NO_MATCHING_KID"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * Copyright 2018 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createSessionCookieVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.ID_TOKEN_INFO = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar util = require(\"../utils/index\");\r\nvar validator = require(\"../utils/validator\");\r\nvar jwt_1 = require(\"../utils/jwt\");\r\n// Audience to use for Firebase Auth Custom tokens\r\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\r\n// URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\r\n// Auth ID tokens)\r\nvar CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com';\r\n// URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\r\nvar SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\r\nvar EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\r\n/** User facing token information related to the Firebase ID token. */\r\nexports.ID_TOKEN_INFO = {\r\n    url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\r\n    verifyApiName: 'verifyIdToken()',\r\n    jwtName: 'Firebase ID token',\r\n    shortName: 'ID token',\r\n    expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED,\r\n};\r\n/** User facing token information related to the Firebase session cookie. */\r\nexports.SESSION_COOKIE_INFO = {\r\n    url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\r\n    verifyApiName: 'verifySessionCookie()',\r\n    jwtName: 'Firebase session cookie',\r\n    shortName: 'session cookie',\r\n    expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED,\r\n};\r\n/**\r\n * Class for verifying ID tokens and session cookies.\r\n */\r\nvar FirebaseTokenVerifier = /** @class */ (function () {\r\n    function FirebaseTokenVerifier(clientCertUrl, issuer, tokenInfo, app) {\r\n        this.issuer = issuer;\r\n        this.tokenInfo = tokenInfo;\r\n        this.app = app;\r\n        if (!validator.isURL(clientCertUrl)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\r\n        }\r\n        else if (!validator.isURL(issuer)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\r\n        }\r\n        else if (!validator.isNonNullObject(tokenInfo)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\r\n        }\r\n        else if (!validator.isURL(tokenInfo.url)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\r\n        }\r\n        else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\r\n        }\r\n        else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\r\n        }\r\n        else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\r\n        }\r\n        else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\r\n        }\r\n        this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\r\n        this.signatureVerifier =\r\n            jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent);\r\n        // For backward compatibility, the project ID is validated in the verification call.\r\n    }\r\n    /**\r\n     * Verifies the format and signature of a Firebase Auth JWT token.\r\n     *\r\n     * @param jwtToken The Firebase Auth JWT token to verify.\r\n     * @param isEmulator Whether to accept Auth Emulator tokens.\r\n     * @return A promise fulfilled with the decoded claims of the Firebase Auth ID token.\r\n     */\r\n    FirebaseTokenVerifier.prototype.verifyJWT = function (jwtToken, isEmulator) {\r\n        var _this = this;\r\n        if (isEmulator === void 0) { isEmulator = false; }\r\n        if (!validator.isString(jwtToken)) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"First argument to \" + this.tokenInfo.verifyApiName + \" must be a \" + this.tokenInfo.jwtName + \" string.\");\r\n        }\r\n        return this.ensureProjectId()\r\n            .then(function (projectId) {\r\n            return _this.decodeAndVerify(jwtToken, projectId, isEmulator);\r\n        })\r\n            .then(function (decoded) {\r\n            var decodedIdToken = decoded.payload;\r\n            decodedIdToken.uid = decodedIdToken.sub;\r\n            return decodedIdToken;\r\n        });\r\n    };\r\n    FirebaseTokenVerifier.prototype.ensureProjectId = function () {\r\n        var _this = this;\r\n        return util.findProjectId(this.app)\r\n            .then(function (projectId) {\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\r\n                    (\"GOOGLE_CLOUD_PROJECT environment variable to call \" + _this.tokenInfo.verifyApiName + \".\"));\r\n            }\r\n            return Promise.resolve(projectId);\r\n        });\r\n    };\r\n    FirebaseTokenVerifier.prototype.decodeAndVerify = function (token, projectId, isEmulator) {\r\n        var _this = this;\r\n        return this.safeDecode(token)\r\n            .then(function (decodedToken) {\r\n            _this.verifyContent(decodedToken, projectId, isEmulator);\r\n            return _this.verifySignature(token, isEmulator)\r\n                .then(function () { return decodedToken; });\r\n        });\r\n    };\r\n    FirebaseTokenVerifier.prototype.safeDecode = function (jwtToken) {\r\n        var _this = this;\r\n        return jwt_1.decodeJwt(jwtToken)\r\n            .catch(function (err) {\r\n            if (err.code == jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\r\n                var verifyJwtTokenDocsMessage = \" See \" + _this.tokenInfo.url + \" \" +\r\n                    (\"for details on how to retrieve \" + _this.shortNameArticle + \" \" + _this.tokenInfo.shortName + \".\");\r\n                var errorMessage = \"Decoding \" + _this.tokenInfo.jwtName + \" failed. Make sure you passed \" +\r\n                    (\"the entire string JWT which represents \" + _this.shortNameArticle + \" \") +\r\n                    (_this.tokenInfo.shortName + \".\") + verifyJwtTokenDocsMessage;\r\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n            }\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\r\n        });\r\n    };\r\n    /**\r\n     * Verifies the content of a Firebase Auth JWT.\r\n     *\r\n     * @param fullDecodedToken The decoded JWT.\r\n     * @param projectId The Firebase Project Id.\r\n     * @param isEmulator Whether the token is an Emulator token.\r\n     */\r\n    FirebaseTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId, isEmulator) {\r\n        var header = fullDecodedToken && fullDecodedToken.header;\r\n        var payload = fullDecodedToken && fullDecodedToken.payload;\r\n        var projectIdMatchMessage = \" Make sure the \" + this.tokenInfo.shortName + \" comes from the same \" +\r\n            'Firebase project as the service account used to authenticate this SDK.';\r\n        var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" +\r\n            (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\r\n        var errorMessage;\r\n        if (!isEmulator && typeof header.kid === 'undefined') {\r\n            var isCustomToken = (payload.aud === FIREBASE_AUDIENCE);\r\n            var isLegacyCustomToken = (header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d);\r\n            if (isCustomToken) {\r\n                errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" +\r\n                    (this.tokenInfo.shortName + \", but was given a custom token.\");\r\n            }\r\n            else if (isLegacyCustomToken) {\r\n                errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" +\r\n                    (this.tokenInfo.shortName + \", but was given a legacy custom token.\");\r\n            }\r\n            else {\r\n                errorMessage = 'Firebase ID token has no \"kid\" claim.';\r\n            }\r\n            errorMessage += verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\r\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect algorithm. Expected \\\"\" + jwt_1.ALGORITHM_RS256 + '\" but got ' +\r\n                '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (payload.aud !== projectId) {\r\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"aud\\\" (audience) claim. Expected \\\"\" +\r\n                projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage +\r\n                verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (payload.iss !== this.issuer + projectId) {\r\n            errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"iss\\\" (issuer) claim. Expected \" +\r\n                (\"\\\"\" + this.issuer) + projectId + '\" but got \"' +\r\n                payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (typeof payload.sub !== 'string') {\r\n            errorMessage = this.tokenInfo.jwtName + \" has no \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (payload.sub === '') {\r\n            errorMessage = this.tokenInfo.jwtName + \" has an empty string \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\r\n        }\r\n        else if (payload.sub.length > 128) {\r\n            errorMessage = this.tokenInfo.jwtName + \" has \\\"sub\\\" (subject) claim longer than 128 characters.\" +\r\n                verifyJwtTokenDocsMessage;\r\n        }\r\n        if (errorMessage) {\r\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n        }\r\n    };\r\n    FirebaseTokenVerifier.prototype.verifySignature = function (jwtToken, isEmulator) {\r\n        var _this = this;\r\n        var verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\r\n        return verifier.verify(jwtToken)\r\n            .catch(function (error) {\r\n            throw _this.mapJwtErrorToAuthError(error);\r\n        });\r\n    };\r\n    /**\r\n     * Maps JwtError to FirebaseAuthError\r\n     *\r\n     * @param error JwtError to be mapped.\r\n     * @returns FirebaseAuthError or Error instance.\r\n     */\r\n    FirebaseTokenVerifier.prototype.mapJwtErrorToAuthError = function (error) {\r\n        var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" +\r\n            (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\r\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\r\n            var errorMessage = this.tokenInfo.jwtName + \" has expired. Get a fresh \" + this.tokenInfo.shortName +\r\n                (\" from your client app and try again (auth/\" + this.tokenInfo.expiredErrorCode.code + \").\") +\r\n                verifyJwtTokenDocsMessage;\r\n            return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\r\n        }\r\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\r\n            var errorMessage = this.tokenInfo.jwtName + \" has invalid signature.\" + verifyJwtTokenDocsMessage;\r\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n        }\r\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\r\n            var errorMessage = this.tokenInfo.jwtName + \" has \\\"kid\\\" claim which does not \" +\r\n                (\"correspond to a known public key. Most likely the \" + this.tokenInfo.shortName + \" \") +\r\n                'is expired, so get a fresh token from your client app and try again.';\r\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\r\n        }\r\n        return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\r\n    };\r\n    return FirebaseTokenVerifier;\r\n}());\r\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\r\n/**\r\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\r\n *\r\n * @param app Firebase app instance.\r\n * @return FirebaseTokenVerifier\r\n */\r\nfunction createIdTokenVerifier(app) {\r\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\r\n}\r\nexports.createIdTokenVerifier = createIdTokenVerifier;\r\n/**\r\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\r\n *\r\n * @param app Firebase app instance.\r\n * @return FirebaseTokenVerifier\r\n */\r\nfunction createSessionCookieVerifier(app) {\r\n    return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\r\n}\r\nexports.createSessionCookieVerifier = createSessionCookieVerifier;\r\n"]},"metadata":{},"sourceType":"script"}