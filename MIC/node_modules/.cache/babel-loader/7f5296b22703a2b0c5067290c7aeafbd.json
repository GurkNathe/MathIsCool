{"ast":null,"code":"/*! firebase-admin v9.10.0 */\n\"use strict\";\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseInstallationsRequestHandler = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/** Firebase IID backend host. */\n\n\nvar FIREBASE_IID_HOST = 'console.firebase.google.com';\n/** Firebase IID backend path. */\n\nvar FIREBASE_IID_PATH = '/v1/';\n/** Firebase IID request timeout duration in milliseconds. */\n\nvar FIREBASE_IID_TIMEOUT = 10000;\n/** HTTP error codes raised by the backend server. */\n\nvar ERROR_CODES = {\n  400: 'Malformed installation ID argument.',\n  401: 'Request not authorized.',\n  403: 'Project does not match installation ID or the client does not have sufficient privileges.',\n  404: 'Failed to find the installation ID.',\n  409: 'Already deleted.',\n  429: 'Request throttled out by the backend server.',\n  500: 'Internal server error.',\n  503: 'Backend servers are over capacity. Try again later.'\n};\n/**\r\n * Class that provides mechanism to send requests to the FIS backend endpoints.\r\n */\n\nvar FirebaseInstallationsRequestHandler =\n/** @class */\nfunction () {\n  /**\r\n   * @param app The app used to fetch access tokens to sign API requests.\r\n   *\r\n   * @constructor\r\n   */\n  function FirebaseInstallationsRequestHandler(app) {\n    this.app = app;\n    this.host = FIREBASE_IID_HOST;\n    this.timeout = FIREBASE_IID_TIMEOUT;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  FirebaseInstallationsRequestHandler.prototype.deleteInstallation = function (fid) {\n    if (!validator.isNonEmptyString(fid)) {\n      return Promise.reject(new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID, 'Installation ID must be a non-empty string.'));\n    }\n\n    return this.invokeRequestHandler(new api_request_1.ApiSettings(fid, 'DELETE'));\n  };\n  /**\r\n   * Invokes the request handler based on the API settings object passed.\r\n   *\r\n   * @param apiSettings The API endpoint settings to apply to request and response.\r\n   * @return A promise that resolves when the request is complete.\r\n   */\n\n\n  FirebaseInstallationsRequestHandler.prototype.invokeRequestHandler = function (apiSettings) {\n    var _this = this;\n\n    return this.getPathPrefix().then(function (path) {\n      var req = {\n        url: \"https://\" + _this.host + path + apiSettings.getEndpoint(),\n        method: apiSettings.getHttpMethod(),\n        timeout: _this.timeout\n      };\n      return _this.httpClient.send(req);\n    }).then(function () {// return nothing on success\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        var response = err.response;\n        var errorMessage = response.isJson() && 'error' in response.data ? response.data.error : response.text;\n        var template = ERROR_CODES[response.status];\n        var message = template ? \"Installation ID \\\"\" + apiSettings.getEndpoint() + \"\\\": \" + template : errorMessage;\n        throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.API_ERROR, message);\n      } // In case of timeouts and other network errors, the HttpClient returns a\n      // FirebaseError wrapped in the response. Simply throw it here.\n\n\n      throw err;\n    });\n  };\n\n  FirebaseInstallationsRequestHandler.prototype.getPathPrefix = function () {\n    var _this = this;\n\n    if (this.path) {\n      return Promise.resolve(this.path);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        // Assert for an explicit projct ID (either via AppOptions or the cert itself).\n        throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for Installations. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n\n      _this.path = FIREBASE_IID_PATH + (\"project/\" + projectId + \"/instanceId/\");\n      return _this.path;\n    });\n  };\n\n  return FirebaseInstallationsRequestHandler;\n}();\n\nexports.FirebaseInstallationsRequestHandler = FirebaseInstallationsRequestHandler;","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/node_modules/firebase-admin/lib/installations/installations-request-handler.js"],"names":["Object","defineProperty","exports","value","FirebaseInstallationsRequestHandler","error_1","require","api_request_1","utils","validator","FIREBASE_IID_HOST","FIREBASE_IID_PATH","FIREBASE_IID_TIMEOUT","ERROR_CODES","app","host","timeout","httpClient","AuthorizedHttpClient","prototype","deleteInstallation","fid","isNonEmptyString","Promise","reject","FirebaseInstallationsError","InstallationsClientErrorCode","INVALID_INSTALLATION_ID","invokeRequestHandler","ApiSettings","apiSettings","_this","getPathPrefix","then","path","req","url","getEndpoint","method","getHttpMethod","send","catch","err","HttpError","response","errorMessage","isJson","data","error","text","template","status","message","API_ERROR","resolve","findProjectId","projectId","INVALID_PROJECT_ID"],"mappings":"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","sourcesContent":["/*! firebase-admin v9.10.0 */\r\n\"use strict\";\r\n/*!\r\n * @license\r\n * Copyright 2021 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FirebaseInstallationsRequestHandler = void 0;\r\nvar error_1 = require(\"../utils/error\");\r\nvar api_request_1 = require(\"../utils/api-request\");\r\nvar utils = require(\"../utils/index\");\r\nvar validator = require(\"../utils/validator\");\r\n/** Firebase IID backend host. */\r\nvar FIREBASE_IID_HOST = 'console.firebase.google.com';\r\n/** Firebase IID backend path. */\r\nvar FIREBASE_IID_PATH = '/v1/';\r\n/** Firebase IID request timeout duration in milliseconds. */\r\nvar FIREBASE_IID_TIMEOUT = 10000;\r\n/** HTTP error codes raised by the backend server. */\r\nvar ERROR_CODES = {\r\n    400: 'Malformed installation ID argument.',\r\n    401: 'Request not authorized.',\r\n    403: 'Project does not match installation ID or the client does not have sufficient privileges.',\r\n    404: 'Failed to find the installation ID.',\r\n    409: 'Already deleted.',\r\n    429: 'Request throttled out by the backend server.',\r\n    500: 'Internal server error.',\r\n    503: 'Backend servers are over capacity. Try again later.',\r\n};\r\n/**\r\n * Class that provides mechanism to send requests to the FIS backend endpoints.\r\n */\r\nvar FirebaseInstallationsRequestHandler = /** @class */ (function () {\r\n    /**\r\n     * @param app The app used to fetch access tokens to sign API requests.\r\n     *\r\n     * @constructor\r\n     */\r\n    function FirebaseInstallationsRequestHandler(app) {\r\n        this.app = app;\r\n        this.host = FIREBASE_IID_HOST;\r\n        this.timeout = FIREBASE_IID_TIMEOUT;\r\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\r\n    }\r\n    FirebaseInstallationsRequestHandler.prototype.deleteInstallation = function (fid) {\r\n        if (!validator.isNonEmptyString(fid)) {\r\n            return Promise.reject(new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_INSTALLATION_ID, 'Installation ID must be a non-empty string.'));\r\n        }\r\n        return this.invokeRequestHandler(new api_request_1.ApiSettings(fid, 'DELETE'));\r\n    };\r\n    /**\r\n     * Invokes the request handler based on the API settings object passed.\r\n     *\r\n     * @param apiSettings The API endpoint settings to apply to request and response.\r\n     * @return A promise that resolves when the request is complete.\r\n     */\r\n    FirebaseInstallationsRequestHandler.prototype.invokeRequestHandler = function (apiSettings) {\r\n        var _this = this;\r\n        return this.getPathPrefix()\r\n            .then(function (path) {\r\n            var req = {\r\n                url: \"https://\" + _this.host + path + apiSettings.getEndpoint(),\r\n                method: apiSettings.getHttpMethod(),\r\n                timeout: _this.timeout,\r\n            };\r\n            return _this.httpClient.send(req);\r\n        })\r\n            .then(function () {\r\n            // return nothing on success\r\n        })\r\n            .catch(function (err) {\r\n            if (err instanceof api_request_1.HttpError) {\r\n                var response = err.response;\r\n                var errorMessage = (response.isJson() && 'error' in response.data) ?\r\n                    response.data.error : response.text;\r\n                var template = ERROR_CODES[response.status];\r\n                var message = template ?\r\n                    \"Installation ID \\\"\" + apiSettings.getEndpoint() + \"\\\": \" + template : errorMessage;\r\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.API_ERROR, message);\r\n            }\r\n            // In case of timeouts and other network errors, the HttpClient returns a\r\n            // FirebaseError wrapped in the response. Simply throw it here.\r\n            throw err;\r\n        });\r\n    };\r\n    FirebaseInstallationsRequestHandler.prototype.getPathPrefix = function () {\r\n        var _this = this;\r\n        if (this.path) {\r\n            return Promise.resolve(this.path);\r\n        }\r\n        return utils.findProjectId(this.app)\r\n            .then(function (projectId) {\r\n            if (!validator.isNonEmptyString(projectId)) {\r\n                // Assert for an explicit projct ID (either via AppOptions or the cert itself).\r\n                throw new error_1.FirebaseInstallationsError(error_1.InstallationsClientErrorCode.INVALID_PROJECT_ID, 'Failed to determine project ID for Installations. Initialize the '\r\n                    + 'SDK with service account credentials or set project ID as an app option. '\r\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\r\n            }\r\n            _this.path = FIREBASE_IID_PATH + (\"project/\" + projectId + \"/instanceId/\");\r\n            return _this.path;\r\n        });\r\n    };\r\n    return FirebaseInstallationsRequestHandler;\r\n}());\r\nexports.FirebaseInstallationsRequestHandler = FirebaseInstallationsRequestHandler;\r\n"]},"metadata":{},"sourceType":"script"}