{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ethan\\\\OneDrive\\\\Desktop\\\\Files\\\\Coding\\\\Websites\\\\MathIsCool\\\\MIC\\\\src\\\\components\\\\back\\\\Individual.js\",\n    _s = $RefreshSig$();\n\nimport { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport Auto from \"../random/Auto.js\"; //Options for each dropdown. Probably use JSON for them\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nlet options = require(\"./options\");\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch'\n    }\n  },\n  gform: {\n    width: \"100%\",\n    height: \"1379px\",\n    frameBorder: \"0\",\n    marginHeight: \"0\",\n    marginWidth: \"0\"\n  }\n}));\n\nfunction Individual() {\n  _s();\n\n  const classes = useStyles();\n  const [choice, setChoice] = useState({\n    loc: null,\n    lev: null,\n    name: \"\",\n    grade: null,\n    school: null,\n    stlev: null,\n    schoolData: {\n      value: null,\n      label: null,\n      div: null\n    },\n    team1: null,\n    team2: null,\n    coach: \"\",\n    error: false\n  });\n  let longest = 0;\n  var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\n                &entry.296234163=${choice.loc}\n                &entry.1262511676=${choice.lev}\n                &entry.2068664503=${choice.schoolData.label}\n                &entry.962283225=${choice.schoolData.value}\n                &entry.1420093772=${choice.schoolData.div}\n                &entry.75608970=${choice.team1}\n                &entry.2041045214=${choice.team2}\n                &entry.2062002355=${choice.coach}`; //finding length of longest string in options and resize search box accordingly\n\n  for (var option in options) {\n    for (let i = 0; i < Object.keys(options[option]).length; i++) {\n      if (options[option][i].label.length > longest) longest = options[option][i].label.length;\n    }\n  } //don't know if there is a good way to do this, couldn't find anything\n\n\n  longest *= 10;\n\n  const onChange = (newValue, type) => {\n    switch (type) {\n      case \"location\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            loc: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            loc: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"level\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            lev: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            lev: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"school\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            school: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            school: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team1\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team1: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team1: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"team2\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            team2: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            team2: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"coach\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            coach: newValue.target.value,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            coach: \"\",\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"name\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            name: newValue.target.value,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            name: \"\",\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"grade\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            grade: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            grade: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      case \"stlev\":\n        if (newValue != null) {\n          setChoice(prevState => ({ ...prevState,\n            stlev: newValue,\n            error: false\n          }));\n        } else {\n          setChoice(prevState => ({ ...prevState,\n            stlev: null,\n            error: false\n          }));\n        }\n\n        break;\n\n      default:\n        console.log(newValue, type);\n    }\n  };\n\n  const onSubmit = event => {\n    //Setting error if something is not filled out.\n    for (const item in choice) {\n      if (choice[item] === null || choice[item] === \"\") {\n        console.log(\"ERROR :\", item);\n        setChoice(prevState => ({ ...prevState,\n          error: true\n        }));\n        break;\n      }\n    } //Getting all the data for that school\n\n\n    for (option in options.school) {\n      if (options.school[option].label === choice.school) {\n        setChoice(prevState => ({ ...prevState,\n          schoolData: {\n            value: options.school[option].value,\n            label: options.school[option].label,\n            div: options.school[option].div\n          }\n        }));\n        console.log(options.school[option]);\n        break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !choice.schoolData.value ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\",\n          borderRadius: \"4px\",\n          margin: \"2%\",\n          boxShadow: \"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"100%\",\n            marginLeft: \"1%\",\n            marginRight: \"1%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: /*#__PURE__*/_jsxDEV(\"b\", {\n              children: [\"This is for registering individual competitors only, for teams go \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/team-register\",\n                style: {\n                  color: \"black\"\n                },\n                children: \"here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 94\n              }, this), \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: classes.root,\n            noValidate: true,\n            autoComplete: \"off\",\n            children: [/*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Competition Location\",\n              options: options.locations,\n              text: \"Select Competition Location\",\n              onChange: (event, newValue) => onChange(newValue, \"location\"),\n              width: longest,\n              value: choice.loc,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Competition Level\",\n              options: options.level,\n              text: \"Select Your Grade Level\",\n              onChange: (event, newValue) => onChange(newValue, \"level\"),\n              width: longest,\n              value: choice.lev,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Student Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                error: choice.error && choice.name === \"\",\n                helperText: choice.error && choice.name === \"\" ? \"Please fill out to continue\" : null,\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                label: \"Student\",\n                value: choice.name,\n                onChange: event => onChange(event, \"name\"),\n                style: {\n                  width: longest\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Student's Current Grade\",\n              options: options.grade,\n              text: \"Select Grade Level\",\n              onChange: (event, newValue) => onChange(newValue, \"grade\"),\n              width: longest,\n              value: choice.grade,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"Student's Math Level for competition\",\n              options: options.stlev,\n              text: \"Select Math Level\",\n              onChange: (event, newValue) => onChange(newValue, \"stlev\"),\n              width: longest,\n              value: choice.stlev,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Auto, {\n              title: \"School Registering\",\n              options: options.school,\n              text: \"Select Your School\",\n              onChange: (event, newValue) => onChange(newValue, \"school\"),\n              width: longest,\n              value: choice.school,\n              error: choice.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Coach\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                error: choice.error && choice.coach === \"\",\n                helperText: choice.error && choice.coach === \"\" ? \"Please fill out to continue\" : null,\n                variant: \"outlined\",\n                margin: \"normal\",\n                required: true,\n                label: \"Coach\",\n                value: choice.coach,\n                onChange: event => onChange(event, \"coach\"),\n                style: {\n                  width: longest\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                sm: 3,\n                width: longest,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  fullWidth: true,\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: onSubmit,\n                  children: \"Continue\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 31\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 23\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Note: team registrations include 2 alternates per grade level.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 23\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: url,\n      className: classes.gform,\n      children: \"Loading\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Individual, \"Sp1vky+SzwpSon4wH71ao9a4L6s=\", false, function () {\n  return [useStyles];\n});\n\n_c = Individual;\nexport default Individual;\n\nvar _c;\n\n$RefreshReg$(_c, \"Individual\");","map":{"version":3,"sources":["C:/Users/ethan/OneDrive/Desktop/Files/Coding/Websites/MathIsCool/MIC/src/components/back/Individual.js"],"names":["TextField","Button","makeStyles","Grid","React","useState","Auto","options","require","useStyles","theme","root","margin","spacing","width","gform","height","frameBorder","marginHeight","marginWidth","Individual","classes","choice","setChoice","loc","lev","name","grade","school","stlev","schoolData","value","label","div","team1","team2","coach","error","longest","url","option","i","Object","keys","length","onChange","newValue","type","prevState","target","console","log","onSubmit","event","item","display","flexDirection","borderRadius","boxShadow","marginLeft","marginRight","color","locations","level"],"mappings":"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","sourcesContent":["import { TextField, Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Auto from \"../random/Auto.js\";\r\n\r\n//Options for each dropdown. Probably use JSON for them\r\n\r\nlet options = require(\"./options\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n   root: {\r\n     '& .MuiTextField-root': {\r\n       margin: theme.spacing(1),\r\n       width: '25ch',\r\n     },\r\n   },\r\n   gform: {\r\n      width:\"100%\",\r\n      height:\"1379px\",\r\n      frameBorder:\"0\",\r\n      marginHeight:\"0\",\r\n      marginWidth:\"0\",\r\n   }\r\n }));\r\n\r\nfunction Individual(){\r\n   const classes = useStyles();\r\n   const [choice, setChoice] = useState({ loc: null, \r\n                                          lev: null, \r\n                                          name: \"\",\r\n                                          grade: null,\r\n                                          school: null,\r\n                                          stlev: null,\r\n                                          schoolData: {\r\n                                             value: null,\r\n                                             label: null,\r\n                                             div: null,\r\n                                           },\r\n                                          team1: null,\r\n                                          team2: null,\r\n                                          coach: \"\",\r\n                                          error: false,\r\n                                       });\r\n\r\n   let longest = 0;\r\n\r\n   var url = `https://docs.google.com/forms/d/e/1FAIpQLSeJ_fqnbSPgfrCmRAlcGN8lFCnLKw2zbvb8YUMRtYDjSTMXVQ/viewform?usp=pp_url\r\n                &entry.296234163=${choice.loc}\r\n                &entry.1262511676=${choice.lev}\r\n                &entry.2068664503=${choice.schoolData.label}\r\n                &entry.962283225=${choice.schoolData.value}\r\n                &entry.1420093772=${choice.schoolData.div}\r\n                &entry.75608970=${choice.team1}\r\n                &entry.2041045214=${choice.team2}\r\n                &entry.2062002355=${choice.coach}`\r\n\r\n   //finding length of longest string in options and resize search box accordingly\r\n   for(var option in options){\r\n      for(let i = 0; i < Object.keys(options[option]).length; i++){\r\n         if(options[option][i].label.length > longest)\r\n            longest = options[option][i].label.length;\r\n      }\r\n   }\r\n\r\n   //don't know if there is a good way to do this, couldn't find anything\r\n   longest *= 10;\r\n\r\n   const onChange = (newValue, type) => {\r\n      switch (type) {\r\n         case \"location\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  loc: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"level\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  lev: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"school\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  school: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team1\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team1: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"team2\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  team2: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n         case \"coach\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: newValue.target.value,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  coach: \"\",\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n          case \"name\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  name: newValue.target.value,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  name: \"\",\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n          case \"grade\":\r\n            if(newValue != null){\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  grade: newValue,\r\n                  error: false,\r\n               }));\r\n            } else {\r\n               setChoice((prevState) => ({\r\n                  ...prevState,\r\n                  grade: null,\r\n                  error: false,\r\n               }));\r\n            }\r\n            break;\r\n          case \"stlev\":\r\n              if(newValue != null){\r\n                 setChoice((prevState) => ({\r\n                    ...prevState,\r\n                    stlev: newValue,\r\n                    error: false,\r\n                 }));\r\n              } else {\r\n                 setChoice((prevState) => ({\r\n                    ...prevState,\r\n                    stlev: null,\r\n                    error: false,\r\n                 }));\r\n              }\r\n              break;\r\n         default:\r\n            console.log(newValue, type)\r\n      }\r\n   };\r\n\r\n   const onSubmit = (event) => {\r\n      \r\n      //Setting error if something is not filled out.\r\n      for (const item in choice){\r\n         if(choice[item] === null || choice[item] === \"\"){\r\n            console.log(\"ERROR :\", item)\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               error: true,\r\n            }));\r\n            break;\r\n         }\r\n      }\r\n\r\n      //Getting all the data for that school\r\n      for(option in options.school){\r\n         if(options.school[option].label === choice.school){\r\n            setChoice((prevState) => ({\r\n               ...prevState,\r\n               schoolData: {\r\n                value: options.school[option].value,\r\n                label: options.school[option].label,\r\n                div: options.school[option].div,\r\n               }\r\n            }));\r\n            console.log(options.school[option])\r\n            break;\r\n         }\r\n      }\r\n   }\r\n\r\n   return(\r\n      <>\r\n         {!choice.schoolData.value ?\r\n            <div style={{display: \"flex\", flexDirection:\"row\", width:\"100%\"}}>\r\n               <div style={{width:\"100%\", borderRadius: \"4px\", margin:\"2%\", boxShadow:\"0 3px 1px -2px rgb(0 0 0 / 20%), 0 2px 2px 0 rgb(0 0 0 / 14%), 0 1px 5px 0 rgb(0 0 0 / 12%)\"}}>\r\n                  <div style={{width:\"100%\", marginLeft:\"1%\", marginRight:\"1%\",}}>\r\n                      <p>\r\n                        <b>This is for registering individual competitors only, for teams go <a href=\"/team-register\" style={{color:\"black\"}}>here</a>.</b>\r\n                      </p>\r\n                      <form className={classes.root} noValidate autoComplete=\"off\">\r\n\r\n                        <Auto\r\n                            title=\"Competition Location\"\r\n                            options={options.locations}\r\n                            text=\"Select Competition Location\"\r\n                            onChange={(event, newValue) => onChange(newValue, \"location\")}\r\n                            width={longest}\r\n                            value={choice.loc}\r\n                            error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                            title=\"Competition Level\"\r\n                            options={options.level}\r\n                            text=\"Select Your Grade Level\"\r\n                            onChange={(event, newValue) => onChange(newValue, \"level\")}\r\n                            width={longest}\r\n                            value={choice.lev}\r\n                            error={choice.error}\r\n                        />\r\n\r\n                        <div style={{display:\"flex\"}}>\r\n                            <Grid item sm={3}>\r\n                              <p>Student Name</p>\r\n                            </Grid>\r\n                            <TextField\r\n                              error={choice.error && choice.name === \"\"}\r\n                              helperText={choice.error && choice.name === \"\" ? \r\n                                              \"Please fill out to continue\" : \r\n                                              null\r\n                                          }\r\n                              variant=\"outlined\" \r\n                              margin=\"normal\" \r\n                              required\r\n                              label=\"Student\"\r\n                              value={choice.name}\r\n                              onChange={(event) => onChange(event, \"name\")}\r\n                              style={{ width: longest }}\r\n                            >\r\n                            </TextField>\r\n                        </div>\r\n\r\n                        <Auto\r\n                            title=\"Student's Current Grade\"\r\n                            options={options.grade}\r\n                            text=\"Select Grade Level\"\r\n                            onChange={(event, newValue) => onChange(newValue, \"grade\")}\r\n                            width={longest}\r\n                            value={choice.grade}\r\n                            error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                            title=\"Student's Math Level for competition\"\r\n                            options={options.stlev}\r\n                            text=\"Select Math Level\"\r\n                            onChange={(event, newValue) => onChange(newValue, \"stlev\")}\r\n                            width={longest}\r\n                            value={choice.stlev}\r\n                            error={choice.error}\r\n                        />\r\n\r\n                        <Auto\r\n                            title=\"School Registering\"\r\n                            options={options.school}\r\n                            text=\"Select Your School\"\r\n                            onChange={(event, newValue) => onChange(newValue, \"school\")}\r\n                            width={longest}\r\n                            value={choice.school}\r\n                            error={choice.error}\r\n                        />\r\n\r\n                        <div style={{display:\"flex\"}}>\r\n                            <Grid item sm={3}>\r\n                              <p>Coach</p>\r\n                            </Grid>\r\n                            <TextField\r\n                              error={choice.error && choice.coach === \"\"}\r\n                              helperText={choice.error && choice.coach === \"\" ? \r\n                                              \"Please fill out to continue\" : \r\n                                              null\r\n                                          }\r\n                              variant=\"outlined\" \r\n                              margin=\"normal\" \r\n                              required\r\n                              label=\"Coach\"\r\n                              value={choice.coach}\r\n                              onChange={(event) => onChange(event, \"coach\")}\r\n                              style={{ width: longest }}\r\n                            >\r\n                            </TextField>\r\n                        </div>\r\n\r\n                        <Grid container>\r\n                            <Grid item sm={3}></Grid>\r\n                            <Grid item sm={3} width={longest}>\r\n                              <Button\r\n                                  fullWidth\r\n                                  variant=\"contained\"\r\n                                  color=\"primary\"\r\n                                  onClick={onSubmit}\r\n                              >\r\n                                  Continue\r\n                              </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                      </form>\r\n                      <p>\r\n                        Note: team registrations include 2 alternates per grade level.\r\n                      </p>\r\n                  </div>\r\n               </div>\r\n            </div> :\r\n            <iframe \r\n               src={url} \r\n               className={classes.gform}\r\n            >\r\n               Loading…\r\n            </iframe>\r\n         }\r\n      </>\r\n   );\r\n}\r\n\r\nexport default Individual;"]},"metadata":{},"sourceType":"module"}